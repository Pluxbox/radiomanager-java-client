/*
 * Pluxbox Radiomanager Client
 * Pluxbox RadioManager gives you the power, flexibility and speed you always wanted in a lightweight and easy-to-use web-based radio solution. With Pluxbox RadioManager you can organise your radio workflow and automate your omnichannel communication with your listeners. We offer wide range specialised services for the radio and connections like Hybrid Radio, Visual Radio, your website and social media without losing focus on your broadcast. For more information visit https://pluxbox.com
 *
 * OpenAPI spec version: 2.0
 * Contact: support@pluxbox.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.pluxbox.radiomanager.api.v2;

import com.pluxbox.radiomanager.api.invoker.ApiException;
import com.pluxbox.radiomanager.api.models.Forbidden;
import com.pluxbox.radiomanager.api.models.InviteUserData;
import com.pluxbox.radiomanager.api.models.InviteUserSuccess;
import com.pluxbox.radiomanager.api.models.NotFound;
import com.pluxbox.radiomanager.api.models.Success;
import com.pluxbox.radiomanager.api.models.TooManyRequests;
import com.pluxbox.radiomanager.api.models.UnprocessableEntity;
import com.pluxbox.radiomanager.api.models.UserResult;
import com.pluxbox.radiomanager.api.models.UserResults;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserApi
 */
@Ignore
public class UserApiTest {

    private final UserApi api = new UserApi();

    
    /**
     * Remove user from station by Id
     *
     * Remove user from station by Id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserByIdTest() throws ApiException {
        Long id = null;
        Success response = api.deleteUserById(id);

        // TODO: test validations
    }
    
    /**
     * Get user by id
     *
     * Get user by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserByIdTest() throws ApiException {
        Long id = null;
        UserResult response = api.getUserById(id);

        // TODO: test validations
    }
    
    /**
     * Invite user by mail
     *
     * Invite user by mail
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void inviteUserByMailTest() throws ApiException {
        InviteUserData data = null;
        InviteUserSuccess response = api.inviteUserByMail(data);

        // TODO: test validations
    }
    
    /**
     * Get all users.
     *
     * List all users.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listUsersTest() throws ApiException {
        Long page = null;
        Long roleId = null;
        UserResults response = api.listUsers(page, roleId);

        // TODO: test validations
    }
    
}
