/*
 * RadioManager
 * RadioManager
 *
 * OpenAPI spec version: 2.0
 * Contact: support@pluxbox.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.pluxbox.radiomanager.api.v2;

import com.pluxbox.radiomanager.api.invoker.ApiException;
import com.pluxbox.radiomanager.api.models.Forbidden;
import com.pluxbox.radiomanager.api.models.NotFound;
import com.pluxbox.radiomanager.api.models.PostSuccess;
import com.pluxbox.radiomanager.api.models.PresenterDataInput;
import com.pluxbox.radiomanager.api.models.PresenterResult;
import com.pluxbox.radiomanager.api.models.PresenterResults;
import com.pluxbox.radiomanager.api.models.Success;
import com.pluxbox.radiomanager.api.models.TooManyRequests;
import com.pluxbox.radiomanager.api.models.UnprocessableEntity;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PresenterApi
 */
@Ignore
public class PresenterApiTest {

    private final PresenterApi api = new PresenterApi();

    
    /**
     * Create presenter.
     *
     * Create presenter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresenterTest() throws ApiException {
        PresenterDataInput data = null;
        PostSuccess response = api.createPresenter(data);

        // TODO: test validations
    }
    
    /**
     * Delete presenter by id
     *
     * Delete presenter by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePresenterByIdTest() throws ApiException {
        Long id = null;
        Success response = api.deletePresenterById(id);

        // TODO: test validations
    }
    
    /**
     * Get presenter by id
     *
     * Get presenter by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPresenterByIdTest() throws ApiException {
        Long id = null;
        Long externalStationId = null;
        PresenterResult response = api.getPresenterById(id, externalStationId);

        // TODO: test validations
    }
    
    /**
     * Get all presenters.
     *
     * List all presenters.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPresentersTest() throws ApiException {
        Long page = null;
        Long programId = null;
        Long broadcastId = null;
        Long modelTypeId = null;
        Long limit = null;
        String orderBy = null;
        String orderDirection = null;
        Long externalStationId = null;
        PresenterResults response = api.listPresenters(page, programId, broadcastId, modelTypeId, limit, orderBy, orderDirection, externalStationId);

        // TODO: test validations
    }
    
    /**
     * Update presenter by id
     *
     * Update presenter by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePresenterByIDTest() throws ApiException {
        Long id = null;
        PresenterDataInput data = null;
        Success response = api.updatePresenterByID(id, data);

        // TODO: test validations
    }
    
}
