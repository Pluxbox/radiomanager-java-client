/*
 * RadioManager
 * RadioManager
 *
 * OpenAPI spec version: 2.0
 * Contact: support@pluxbox.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.pluxbox.radiomanager.api.v2;

import com.pluxbox.radiomanager.api.invoker.ApiException;
import com.pluxbox.radiomanager.api.models.Broadcast;
import com.pluxbox.radiomanager.api.models.BroadcastDataInput;
import com.pluxbox.radiomanager.api.models.BroadcastResult;
import com.pluxbox.radiomanager.api.models.BroadcastResults;
import com.pluxbox.radiomanager.api.models.EPGBroadcast;
import com.pluxbox.radiomanager.api.models.Forbidden;
import com.pluxbox.radiomanager.api.models.NotFound;
import java.time.OffsetDateTime;
import com.pluxbox.radiomanager.api.models.PostSuccess;
import com.pluxbox.radiomanager.api.models.Success;
import com.pluxbox.radiomanager.api.models.TooManyRequests;
import com.pluxbox.radiomanager.api.models.UnprocessableEntity;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BroadcastApi
 */
@Ignore
public class BroadcastApiTest {

    private final BroadcastApi api = new BroadcastApi();

    
    /**
     * Create broadcast.
     *
     * Create broadcast.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createBroadcastTest() throws ApiException {
        BroadcastDataInput data = null;
        PostSuccess response = api.createBroadcast(data);

        // TODO: test validations
    }
    
    /**
     * Delete broadcast by id
     *
     * Delete broadcast by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBroadcastByIdTest() throws ApiException {
        Long id = null;
        Success response = api.deleteBroadcastById(id);

        // TODO: test validations
    }
    
    /**
     * Get broadcast by id
     *
     * Get broadcast by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBroadcastByIdTest() throws ApiException {
        Long id = null;
        Long externalStationId = null;
        BroadcastResult response = api.getBroadcastById(id, externalStationId);

        // TODO: test validations
    }
    
    /**
     * Get current Broadcast
     *
     * Get current Broadcast
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCurrentBroadcastTest() throws ApiException {
        Broadcast response = api.getCurrentBroadcast();

        // TODO: test validations
    }
    
    /**
     * Get daily EPG
     *
     * Get current Broadcast
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDailyEPGTest() throws ApiException {
        OffsetDateTime date = null;
        EPGBroadcast response = api.getDailyEPG(date);

        // TODO: test validations
    }
    
    /**
     * Get EPG by date
     *
     * Get EPG by date
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEPGByDateTest() throws ApiException {
        OffsetDateTime date = null;
        EPGBroadcast response = api.getEPGByDate(date);

        // TODO: test validations
    }
    
    /**
     * Get next Broadcast
     *
     * Get next Broadcast
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNextBroadcastTest() throws ApiException {
        Broadcast response = api.getNextBroadcast();

        // TODO: test validations
    }
    
    /**
     * Get weekly EPG
     *
     * Get weekly EPG
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWeeklyEPGTest() throws ApiException {
        String date = null;
        EPGBroadcast response = api.getWeeklyEPG(date);

        // TODO: test validations
    }
    
    /**
     * Get all broadcasts.
     *
     * List all broadcasts.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listBroadcastsTest() throws ApiException {
        Long page = null;
        OffsetDateTime startMin = null;
        OffsetDateTime startMax = null;
        Long modelTypeId = null;
        Long tagId = null;
        Long presenterId = null;
        Long itemId = null;
        Long blockId = null;
        Long genreId = null;
        Long programId = null;
        Long externalStationId = null;
        BroadcastResults response = api.listBroadcasts(page, startMin, startMax, modelTypeId, tagId, presenterId, itemId, blockId, genreId, programId, externalStationId);

        // TODO: test validations
    }
    
    /**
     * Print Broadcast by id
     *
     * Print Broadcast by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printBroadcastByIdTest() throws ApiException {
        Long id = null;
        Long programId = null;
        Long presenterId = null;
        Long tagId = null;
        EPGBroadcast response = api.printBroadcastById(id, programId, presenterId, tagId);

        // TODO: test validations
    }
    
    /**
     * Update broadcast by id
     *
     * Update broadcast by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBroadcastByIDTest() throws ApiException {
        Long id = null;
        BroadcastDataInput data = null;
        Success response = api.updateBroadcastByID(id, data);

        // TODO: test validations
    }
    
}
