/*
 * RadioManager
 * RadioManager
 *
 * OpenAPI spec version: 2.0
 * Contact: support@pluxbox.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.pluxbox.radiomanager.api.v2;

import com.pluxbox.radiomanager.api.invoker.ApiException;
import com.pluxbox.radiomanager.api.models.Forbidden;
import com.pluxbox.radiomanager.api.models.NotFound;
import com.pluxbox.radiomanager.api.models.PostSuccess;
import com.pluxbox.radiomanager.api.models.StoryDataInput;
import com.pluxbox.radiomanager.api.models.StoryResult;
import com.pluxbox.radiomanager.api.models.StoryResults;
import com.pluxbox.radiomanager.api.models.Success;
import com.pluxbox.radiomanager.api.models.TooManyRequests;
import com.pluxbox.radiomanager.api.models.UnprocessableEntity;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StoryApi
 */
@Ignore
public class StoryApiTest {

    private final StoryApi api = new StoryApi();

    
    /**
     * Create story.
     *
     * Create story.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createStoryTest() throws ApiException {
        StoryDataInput data = null;
        PostSuccess response = api.createStory(data);

        // TODO: test validations
    }
    
    /**
     * Delete story by id
     *
     * Delete story by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteStoryByIdTest() throws ApiException {
        Long id = null;
        Success response = api.deleteStoryById(id);

        // TODO: test validations
    }
    
    /**
     * Get story by id
     *
     * Get story by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStoryByIdTest() throws ApiException {
        Long id = null;
        Long externalStationId = null;
        StoryResult response = api.getStoryById(id, externalStationId);

        // TODO: test validations
    }
    
    /**
     * Get all stories.
     *
     * List all stories.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listStoriesTest() throws ApiException {
        Long page = null;
        Long modelTypeId = null;
        Long tagId = null;
        Long itemId = null;
        Long externalStationId = null;
        StoryResults response = api.listStories(page, modelTypeId, tagId, itemId, externalStationId);

        // TODO: test validations
    }
    
    /**
     * Update story by id
     *
     * Update story by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateStoryByIDTest() throws ApiException {
        Long id = null;
        StoryDataInput data = null;
        Success response = api.updateStoryByID(id, data);

        // TODO: test validations
    }
    
}
