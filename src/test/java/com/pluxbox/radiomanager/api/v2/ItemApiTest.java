/*
 * RadioManager
 * RadioManager
 *
 * OpenAPI spec version: 2.0
 * Contact: support@pluxbox.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.pluxbox.radiomanager.api.v2;

import com.pluxbox.radiomanager.api.invoker.ApiException;
import com.pluxbox.radiomanager.api.models.Data;
import com.pluxbox.radiomanager.api.models.Data1;
import com.pluxbox.radiomanager.api.models.Forbidden;
import com.pluxbox.radiomanager.api.models.ImportItem;
import com.pluxbox.radiomanager.api.models.InlineResponse202;
import com.pluxbox.radiomanager.api.models.Item;
import com.pluxbox.radiomanager.api.models.ItemDataInput;
import com.pluxbox.radiomanager.api.models.ItemResult;
import com.pluxbox.radiomanager.api.models.ItemResults;
import com.pluxbox.radiomanager.api.models.NotFound;
import java.time.OffsetDateTime;
import com.pluxbox.radiomanager.api.models.PostSuccess;
import com.pluxbox.radiomanager.api.models.Success;
import com.pluxbox.radiomanager.api.models.TooManyRequests;
import com.pluxbox.radiomanager.api.models.UnprocessableEntity;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ItemApi
 */
@Ignore
public class ItemApiTest {

    private final ItemApi api = new ItemApi();

    
    /**
     * Create an new item.
     *
     * Create item.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createItemTest() throws ApiException {
        ItemDataInput data = null;
        PostSuccess response = api.createItem(data);

        // TODO: test validations
    }
    
    /**
     * Post a current playing item, keep structure
     *
     * Post a current playing item, keep structure
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void currentItemPostStructureTest() throws ApiException {
        ImportItem data = null;
        Success response = api.currentItemPostStructure(data);

        // TODO: test validations
    }
    
    /**
     * Post a current playing item
     *
     * Post a current playing item
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void currentItemPostTimingTest() throws ApiException {
        ImportItem data = null;
        Success response = api.currentItemPostTiming(data);

        // TODO: test validations
    }
    
    /**
     * Delete item by ID.
     *
     * Delete item by id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteItemByIdTest() throws ApiException {
        Long id = null;
        Success response = api.deleteItemById(id);

        // TODO: test validations
    }
    
    /**
     * Get extended item details by ID.
     *
     * Read item by id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getItemByIdTest() throws ApiException {
        Long id = null;
        Long externalStationId = null;
        ItemResult response = api.getItemById(id, externalStationId);

        // TODO: test validations
    }
    
    /**
     * Get a list of all the items currently in your station.
     *
     * Get a list of all the items currently in your station. This feature supports pagination and will give a maximum results of 50 items back.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listItemsTest() throws ApiException {
        Long page = null;
        Long blockId = null;
        Long broadcastId = null;
        Long modelTypeId = null;
        Long tagId = null;
        Long campaignId = null;
        Long contactId = null;
        Long programDraftId = null;
        Long userDraftId = null;
        Long stationDraftId = null;
        Long programId = null;
        OffsetDateTime startMin = null;
        OffsetDateTime startMax = null;
        Integer durationMin = null;
        Integer durationMax = null;
        String status = null;
        Long limit = null;
        String orderBy = null;
        String orderDirection = null;
        Long externalStationId = null;
        ItemResults response = api.listItems(page, blockId, broadcastId, modelTypeId, tagId, campaignId, contactId, programDraftId, userDraftId, stationDraftId, programId, startMin, startMax, durationMin, durationMax, status, limit, orderBy, orderDirection, externalStationId);

        // TODO: test validations
    }
    
    /**
     * Post a playlist, keep current structure
     *
     * Post a playlist, keep current structure
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void playlistPostStructureTest() throws ApiException {
        Data1 data = null;
        InlineResponse202 response = api.playlistPostStructure(data);

        // TODO: test validations
    }
    
    /**
     * Post a playlist
     *
     * Post a playlist
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void playlistPostTimingTest() throws ApiException {
        Data data = null;
        InlineResponse202 response = api.playlistPostTiming(data);

        // TODO: test validations
    }
    
    /**
     * Update extended item details by ID.
     *
     * Update item by id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateItemByIdTest() throws ApiException {
        Long id = null;
        Item data = null;
        Success response = api.updateItemById(id, data);

        // TODO: test validations
    }
    
}
