/*
 * Pluxbox Radiomanager Client
 * Pluxbox RadioManager gives you the power, flexibility and speed you always wanted in a lightweight and easy-to-use web-based radio solution. With Pluxbox RadioManager you can organise your radio workflow and automate your omnichannel communication with your listeners. We offer wide range specialised services for the radio and connections like Hybrid Radio, Visual Radio, your website and social media without losing focus on your broadcast. For more information visit https://pluxbox.com
 *
 * OpenAPI spec version: 2.0
 * Contact: support@pluxbox.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.pluxbox.radiomanager.api.v2;

import com.pluxbox.radiomanager.api.invoker.ApiException;
import com.pluxbox.radiomanager.api.models.CampaignDataInput;
import com.pluxbox.radiomanager.api.models.CampaignResult;
import com.pluxbox.radiomanager.api.models.CampaignResults;
import com.pluxbox.radiomanager.api.models.Forbidden;
import com.pluxbox.radiomanager.api.models.NotFound;
import java.time.OffsetDateTime;
import com.pluxbox.radiomanager.api.models.PostSuccess;
import com.pluxbox.radiomanager.api.models.Success;
import com.pluxbox.radiomanager.api.models.TooManyRequests;
import com.pluxbox.radiomanager.api.models.UnprocessableEntity;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CampaignApi
 */
@Ignore
public class CampaignApiTest {

    private final CampaignApi api = new CampaignApi();

    
    /**
     * Create campaign.
     *
     * Create campaign.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCampaignTest() throws ApiException {
        CampaignDataInput data = null;
        PostSuccess response = api.createCampaign(data);

        // TODO: test validations
    }
    
    /**
     * Delete campaign by id
     *
     * Delete campaign by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCampaignByIdTest() throws ApiException {
        Long id = null;
        Success response = api.deleteCampaignById(id);

        // TODO: test validations
    }
    
    /**
     * Get campaign by id
     *
     * Get campaign by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCampaignByIdTest() throws ApiException {
        Long id = null;
        Long externalStationId = null;
        CampaignResult response = api.getCampaignById(id, externalStationId);

        // TODO: test validations
    }
    
    /**
     * Get all campaigns.
     *
     * List all campaigns.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCampaignsTest() throws ApiException {
        Long page = null;
        Long modelTypeId = null;
        Long itemId = null;
        OffsetDateTime startMin = null;
        OffsetDateTime startMax = null;
        Long externalStationId = null;
        CampaignResults response = api.listCampaigns(page, modelTypeId, itemId, startMin, startMax, externalStationId);

        // TODO: test validations
    }
    
    /**
     * Update campaign by id
     *
     * Update campaign by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCampaignByIDTest() throws ApiException {
        Long id = null;
        CampaignDataInput data = null;
        Success response = api.updateCampaignByID(id, data);

        // TODO: test validations
    }
    
}
