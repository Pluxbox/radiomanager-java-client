/*
 * RadioManager
 * RadioManager
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@pluxbox.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package radiomanager;

import com.pluxbox.radiomanager.api.invoker.ApiException;
import com.pluxbox.radiomanager.api.models.Contact;
import com.pluxbox.radiomanager.api.models.ContactDataInput;
import com.pluxbox.radiomanager.api.models.ContactResult;
import com.pluxbox.radiomanager.api.models.ContactResults;
import com.pluxbox.radiomanager.api.models.Forbidden;
import com.pluxbox.radiomanager.api.models.NotFound;
import com.pluxbox.radiomanager.api.models.PostSuccess;
import com.pluxbox.radiomanager.api.models.Success;
import com.pluxbox.radiomanager.api.models.TooManyRequests;
import com.pluxbox.radiomanager.api.models.UnprocessableEntity;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ContactApi
 */
@Ignore
public class ContactApiTest {

    private final ContactApi api = new ContactApi();

    
    /**
     * Create contact.
     *
     * Create contact.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContactTest() throws ApiException {
        ContactDataInput data = null;
        PostSuccess response = api.createContact(data);

        // TODO: test validations
    }
    
    /**
     * Delete contact by id
     *
     * Delete contact by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContactByIdTest() throws ApiException {
        Long id = null;
        Success response = api.deleteContactById(id);

        // TODO: test validations
    }
    
    /**
     * Get contact by id
     *
     * Get contact by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactByIdTest() throws ApiException {
        Long id = null;
        Long externalStationId = null;
        ContactResult response = api.getContactById(id, externalStationId);

        // TODO: test validations
    }
    
    /**
     * Get all contacts.
     *
     * List all contacts.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listContactsTest() throws ApiException {
        Long page = null;
        Long itemId = null;
        Long modelTypeId = null;
        Long tagId = null;
        Long limit = null;
        String orderBy = null;
        String orderDirection = null;
        Long externalStationId = null;
        ContactResults response = api.listContacts(page, itemId, modelTypeId, tagId, limit, orderBy, orderDirection, externalStationId);

        // TODO: test validations
    }
    
    /**
     * Update contact by id
     *
     * Update contact by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContactByIDTest() throws ApiException {
        Long id = null;
        ContactDataInput data = null;
        Success response = api.updateContactByID(id, data);

        // TODO: test validations
    }
    
}
