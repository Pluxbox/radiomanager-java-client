/*
 * RadioManager
 * RadioManager
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@pluxbox.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package radiomanager;

import com.pluxbox.radiomanager.api.invoker.ApiException;
import com.pluxbox.radiomanager.api.models.Campaign;
import com.pluxbox.radiomanager.api.models.CampaignDataInput;
import com.pluxbox.radiomanager.api.models.CampaignResult;
import com.pluxbox.radiomanager.api.models.CampaignResults;
import com.pluxbox.radiomanager.api.models.Forbidden;
import com.pluxbox.radiomanager.api.models.NotFound;
import java.time.OffsetDateTime;
import com.pluxbox.radiomanager.api.models.PostSuccess;
import com.pluxbox.radiomanager.api.models.Success;
import com.pluxbox.radiomanager.api.models.TooManyRequests;
import com.pluxbox.radiomanager.api.models.UnprocessableEntity;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CampaignApi
 */
@Ignore
public class CampaignApiTest {

    private final CampaignApi api = new CampaignApi();

    
    /**
     * Create campaign.
     *
     * Create campaign.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCampaignTest() throws ApiException {
        CampaignDataInput data = null;
        PostSuccess response = api.createCampaign(data);

        // TODO: test validations
    }
    
    /**
     * Delete campaign by id
     *
     * Delete campaign by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCampaignByIdTest() throws ApiException {
        Long id = null;
        Success response = api.deleteCampaignById(id);

        // TODO: test validations
    }
    
    /**
     * Get campaign by id
     *
     * Get campaign by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCampaignByIdTest() throws ApiException {
        Long id = null;
        Long externalStationId = null;
        CampaignResult response = api.getCampaignById(id, externalStationId);

        // TODO: test validations
    }
    
    /**
     * Get all campaigns.
     *
     * List all campaigns.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCampaignsTest() throws ApiException {
        Long page = null;
        Long itemId = null;
        Long modelTypeId = null;
        OffsetDateTime startMin = null;
        OffsetDateTime startMax = null;
        Long limit = null;
        String orderBy = null;
        String orderDirection = null;
        Long externalStationId = null;
        CampaignResults response = api.listCampaigns(page, itemId, modelTypeId, startMin, startMax, limit, orderBy, orderDirection, externalStationId);

        // TODO: test validations
    }
    
    /**
     * Update campaign by id
     *
     * Update campaign by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCampaignByIDTest() throws ApiException {
        Long id = null;
        CampaignDataInput data = null;
        Success response = api.updateCampaignByID(id, data);

        // TODO: test validations
    }
    
}
