/*
 * RadioManager
 * This OpenAPI 3 Document describes the functionality of the API v2 of RadioManager. Note that no rights can be derived from this Document and the true functionality of the API might differ.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@pluxbox.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package radiomanager;

import com.pluxbox.radiomanager.api.invoker.ApiException;
import com.pluxbox.radiomanager.api.models.InlineResponse20012;
import com.pluxbox.radiomanager.api.models.InlineResponse2002;
import com.pluxbox.radiomanager.api.models.InlineResponse202;
import com.pluxbox.radiomanager.api.models.InlineResponse400;
import com.pluxbox.radiomanager.api.models.InlineResponse401;
import com.pluxbox.radiomanager.api.models.InlineResponse403;
import com.pluxbox.radiomanager.api.models.InlineResponse404;
import com.pluxbox.radiomanager.api.models.InlineResponse422;
import com.pluxbox.radiomanager.api.models.InlineResponse429;
import com.pluxbox.radiomanager.api.models.InlineResponse500;
import com.pluxbox.radiomanager.api.models.TagDataInput;
import com.pluxbox.radiomanager.api.models.TagResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TagApi
 */
@Disabled
public class TagApiTest {

    private final TagApi api = new TagApi();

    /**
     * Create tag.
     *
     * Create tag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTagTest() throws ApiException {
        TagDataInput tagDataInput = null;
        InlineResponse2002 response = api.createTag(tagDataInput);
        // TODO: test validations
    }

    /**
     * Delete tag by id
     *
     * Delete tag by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTagByIdTest() throws ApiException {
        Long id = null;
        InlineResponse202 response = api.deleteTagById(id);
        // TODO: test validations
    }

    /**
     * Get tags by id
     *
     * Get tags by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagByIdTest() throws ApiException {
        Long id = null;
        TagResult response = api.getTagById(id);
        // TODO: test validations
    }

    /**
     * Get a list of all the tags currently in your station.
     *
     * Get a list of all the tags currently in your station. This feature supports pagination and will give a maximum results of 50 tags back.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsTest() throws ApiException {
        Long programId = null;
        Long itemId = null;
        Long broadcastId = null;
        Long contactId = null;
        Long page = null;
        Long limit = null;
        String orderBy = null;
        String orderDirection = null;
        Long externalStationId = null;
        InlineResponse20012 response = api.listTags(programId, itemId, broadcastId, contactId, page, limit, orderBy, orderDirection, externalStationId);
        // TODO: test validations
    }

    /**
     * Update tag by id
     *
     * Update tag by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTagByIDTest() throws ApiException {
        Long id = null;
        TagDataInput tagDataInput = null;
        InlineResponse202 response = api.updateTagByID(id, tagDataInput);
        // TODO: test validations
    }

}
