/*
 * RadioManager
 * RadioManager
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@pluxbox.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package radiomanager;

import com.pluxbox.radiomanager.api.invoker.ApiCallback;
import com.pluxbox.radiomanager.api.invoker.ApiClient;
import com.pluxbox.radiomanager.api.invoker.ApiException;
import com.pluxbox.radiomanager.api.invoker.ApiResponse;
import com.pluxbox.radiomanager.api.invoker.Configuration;
import com.pluxbox.radiomanager.api.invoker.Pair;
import com.pluxbox.radiomanager.api.invoker.ProgressRequestBody;
import com.pluxbox.radiomanager.api.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.pluxbox.radiomanager.api.models.Forbidden;
import com.pluxbox.radiomanager.api.models.NotFound;
import com.pluxbox.radiomanager.api.models.PostSuccess;
import com.pluxbox.radiomanager.api.models.Success;
import com.pluxbox.radiomanager.api.models.Tag;
import com.pluxbox.radiomanager.api.models.TagDataInput;
import com.pluxbox.radiomanager.api.models.TagResult;
import com.pluxbox.radiomanager.api.models.TagResults;
import com.pluxbox.radiomanager.api.models.TooManyRequests;
import com.pluxbox.radiomanager.api.models.UnprocessableEntity;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TagApi {
    private ApiClient localVarApiClient;

    public TagApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TagApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createTag
     * @param data Data **(Required)** (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a tag </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTagCall(TagDataInput data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/tags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "API-Key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTagValidateBeforeCall(TagDataInput data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling createTag(Async)");
        }
        

        okhttp3.Call localVarCall = createTagCall(data, _callback);
        return localVarCall;

    }

    /**
     * Create tag.
     * Create tag.
     * @param data Data **(Required)** (required)
     * @return PostSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a tag </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public PostSuccess createTag(TagDataInput data) throws ApiException {
        ApiResponse<PostSuccess> localVarResp = createTagWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * Create tag.
     * Create tag.
     * @param data Data **(Required)** (required)
     * @return ApiResponse&lt;PostSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a tag </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PostSuccess> createTagWithHttpInfo(TagDataInput data) throws ApiException {
        okhttp3.Call localVarCall = createTagValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<PostSuccess>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create tag. (asynchronously)
     * Create tag.
     * @param data Data **(Required)** (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a tag </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTagAsync(TagDataInput data, final ApiCallback<PostSuccess> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTagValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<PostSuccess>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTagById
     * @param id ID of Tag **(Required)** (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted Tag by id </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTagByIdCall(Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tags/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "API-Key" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTagByIdValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteTagById(Async)");
        }
        

        okhttp3.Call localVarCall = deleteTagByIdCall(id, _callback);
        return localVarCall;

    }

    /**
     * Delete tag by id
     * Delete tag by id
     * @param id ID of Tag **(Required)** (required)
     * @return Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted Tag by id </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public Success deleteTagById(Long id) throws ApiException {
        ApiResponse<Success> localVarResp = deleteTagByIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete tag by id
     * Delete tag by id
     * @param id ID of Tag **(Required)** (required)
     * @return ApiResponse&lt;Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted Tag by id </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Success> deleteTagByIdWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = deleteTagByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete tag by id (asynchronously)
     * Delete tag by id
     * @param id ID of Tag **(Required)** (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted Tag by id </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTagByIdAsync(Long id, final ApiCallback<Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTagByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTagById
     * @param id ID of Tag **(Required)** (required)
     * @param externalStationId Query on a different (content providing) station *(Optional)* (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully got Tag by ID </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTagByIdCall(Long id, Long externalStationId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tags/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (externalStationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_external_station_id", externalStationId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "API-Key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTagByIdValidateBeforeCall(Long id, Long externalStationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getTagById(Async)");
        }
        

        okhttp3.Call localVarCall = getTagByIdCall(id, externalStationId, _callback);
        return localVarCall;

    }

    /**
     * Get tags by id
     * Get tags by id
     * @param id ID of Tag **(Required)** (required)
     * @param externalStationId Query on a different (content providing) station *(Optional)* (optional)
     * @return TagResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully got Tag by ID </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public TagResult getTagById(Long id, Long externalStationId) throws ApiException {
        ApiResponse<TagResult> localVarResp = getTagByIdWithHttpInfo(id, externalStationId);
        return localVarResp.getData();
    }

    /**
     * Get tags by id
     * Get tags by id
     * @param id ID of Tag **(Required)** (required)
     * @param externalStationId Query on a different (content providing) station *(Optional)* (optional)
     * @return ApiResponse&lt;TagResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully got Tag by ID </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TagResult> getTagByIdWithHttpInfo(Long id, Long externalStationId) throws ApiException {
        okhttp3.Call localVarCall = getTagByIdValidateBeforeCall(id, externalStationId, null);
        Type localVarReturnType = new TypeToken<TagResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get tags by id (asynchronously)
     * Get tags by id
     * @param id ID of Tag **(Required)** (required)
     * @param externalStationId Query on a different (content providing) station *(Optional)* (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully got Tag by ID </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTagByIdAsync(Long id, Long externalStationId, final ApiCallback<TagResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTagByIdValidateBeforeCall(id, externalStationId, _callback);
        Type localVarReturnType = new TypeToken<TagResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTags
     * @param page Current page *(Optional)* (optional)
     * @param programId Search on Program ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param itemId Search on Item ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param broadcastId Search on Broadcast ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param contactId Search on Contact ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param limit Results per page *(Optional)* (optional)
     * @param orderBy Field to order the results *(Optional)* (optional)
     * @param orderDirection Direction of ordering *(Optional)* (optional)
     * @param externalStationId Query on a different (content providing) station *(Optional)* (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully got all tags </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsCall(Long page, Long programId, Long itemId, Long broadcastId, Long contactId, Long limit, String orderBy, String orderDirection, Long externalStationId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (programId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("program_id", programId));
        }

        if (itemId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("item_id", itemId));
        }

        if (broadcastId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("broadcast_id", broadcastId));
        }

        if (contactId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_id", contactId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order-by", orderBy));
        }

        if (orderDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order-direction", orderDirection));
        }

        if (externalStationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_external_station_id", externalStationId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "API-Key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTagsValidateBeforeCall(Long page, Long programId, Long itemId, Long broadcastId, Long contactId, Long limit, String orderBy, String orderDirection, Long externalStationId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listTagsCall(page, programId, itemId, broadcastId, contactId, limit, orderBy, orderDirection, externalStationId, _callback);
        return localVarCall;

    }

    /**
     * Get a list of all the tags currently in your station.
     * Get a list of all the tags currently in your station. This feature supports pagination and will give a maximum results of 50 tags back.
     * @param page Current page *(Optional)* (optional)
     * @param programId Search on Program ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param itemId Search on Item ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param broadcastId Search on Broadcast ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param contactId Search on Contact ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param limit Results per page *(Optional)* (optional)
     * @param orderBy Field to order the results *(Optional)* (optional)
     * @param orderDirection Direction of ordering *(Optional)* (optional)
     * @param externalStationId Query on a different (content providing) station *(Optional)* (optional)
     * @return TagResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully got all tags </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public TagResults listTags(Long page, Long programId, Long itemId, Long broadcastId, Long contactId, Long limit, String orderBy, String orderDirection, Long externalStationId) throws ApiException {
        ApiResponse<TagResults> localVarResp = listTagsWithHttpInfo(page, programId, itemId, broadcastId, contactId, limit, orderBy, orderDirection, externalStationId);
        return localVarResp.getData();
    }

    /**
     * Get a list of all the tags currently in your station.
     * Get a list of all the tags currently in your station. This feature supports pagination and will give a maximum results of 50 tags back.
     * @param page Current page *(Optional)* (optional)
     * @param programId Search on Program ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param itemId Search on Item ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param broadcastId Search on Broadcast ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param contactId Search on Contact ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param limit Results per page *(Optional)* (optional)
     * @param orderBy Field to order the results *(Optional)* (optional)
     * @param orderDirection Direction of ordering *(Optional)* (optional)
     * @param externalStationId Query on a different (content providing) station *(Optional)* (optional)
     * @return ApiResponse&lt;TagResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully got all tags </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TagResults> listTagsWithHttpInfo(Long page, Long programId, Long itemId, Long broadcastId, Long contactId, Long limit, String orderBy, String orderDirection, Long externalStationId) throws ApiException {
        okhttp3.Call localVarCall = listTagsValidateBeforeCall(page, programId, itemId, broadcastId, contactId, limit, orderBy, orderDirection, externalStationId, null);
        Type localVarReturnType = new TypeToken<TagResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of all the tags currently in your station. (asynchronously)
     * Get a list of all the tags currently in your station. This feature supports pagination and will give a maximum results of 50 tags back.
     * @param page Current page *(Optional)* (optional)
     * @param programId Search on Program ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param itemId Search on Item ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param broadcastId Search on Broadcast ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param contactId Search on Contact ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param limit Results per page *(Optional)* (optional)
     * @param orderBy Field to order the results *(Optional)* (optional)
     * @param orderDirection Direction of ordering *(Optional)* (optional)
     * @param externalStationId Query on a different (content providing) station *(Optional)* (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully got all tags </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsAsync(Long page, Long programId, Long itemId, Long broadcastId, Long contactId, Long limit, String orderBy, String orderDirection, Long externalStationId, final ApiCallback<TagResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTagsValidateBeforeCall(page, programId, itemId, broadcastId, contactId, limit, orderBy, orderDirection, externalStationId, _callback);
        Type localVarReturnType = new TypeToken<TagResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTagByID
     * @param id ID of Tag **(Required)** (required)
     * @param data Data *(Optional)* (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated Tag by id </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTagByIDCall(Long id, TagDataInput data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/tags/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "API-Key" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTagByIDValidateBeforeCall(Long id, TagDataInput data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateTagByID(Async)");
        }
        

        okhttp3.Call localVarCall = updateTagByIDCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * Update tag by id
     * Update tag by id
     * @param id ID of Tag **(Required)** (required)
     * @param data Data *(Optional)* (optional)
     * @return Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated Tag by id </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public Success updateTagByID(Long id, TagDataInput data) throws ApiException {
        ApiResponse<Success> localVarResp = updateTagByIDWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * Update tag by id
     * Update tag by id
     * @param id ID of Tag **(Required)** (required)
     * @param data Data *(Optional)* (optional)
     * @return ApiResponse&lt;Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated Tag by id </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Success> updateTagByIDWithHttpInfo(Long id, TagDataInput data) throws ApiException {
        okhttp3.Call localVarCall = updateTagByIDValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update tag by id (asynchronously)
     * Update tag by id
     * @param id ID of Tag **(Required)** (required)
     * @param data Data *(Optional)* (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated Tag by id </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTagByIDAsync(Long id, TagDataInput data, final ApiCallback<Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTagByIDValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
