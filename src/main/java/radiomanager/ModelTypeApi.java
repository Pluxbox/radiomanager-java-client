/*
 * RadioManager
 * RadioManager
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@pluxbox.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package radiomanager;

import com.pluxbox.radiomanager.api.invoker.ApiCallback;
import com.pluxbox.radiomanager.api.invoker.ApiClient;
import com.pluxbox.radiomanager.api.invoker.ApiException;
import com.pluxbox.radiomanager.api.invoker.ApiResponse;
import com.pluxbox.radiomanager.api.invoker.Configuration;
import com.pluxbox.radiomanager.api.invoker.Pair;
import com.pluxbox.radiomanager.api.invoker.ProgressRequestBody;
import com.pluxbox.radiomanager.api.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.pluxbox.radiomanager.api.models.Forbidden;
import com.pluxbox.radiomanager.api.models.ModelTypeResult;
import com.pluxbox.radiomanager.api.models.ModelTypeResults;
import com.pluxbox.radiomanager.api.models.NotFound;
import com.pluxbox.radiomanager.api.models.TooManyRequests;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ModelTypeApi {
    private ApiClient localVarApiClient;

    public ModelTypeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ModelTypeApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getModelTypeById
     * @param id ID of ModelType **(Required)** (required)
     * @param externalStationId Query on a different (content providing) station *(Optional)* (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully got ModelType by id </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getModelTypeByIdCall(Long id, Long externalStationId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/model_types/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (externalStationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_external_station_id", externalStationId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "API-Key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getModelTypeByIdValidateBeforeCall(Long id, Long externalStationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getModelTypeById(Async)");
        }
        

        okhttp3.Call localVarCall = getModelTypeByIdCall(id, externalStationId, _callback);
        return localVarCall;

    }

    /**
     * Get modelType by id
     * Get modelType by id
     * @param id ID of ModelType **(Required)** (required)
     * @param externalStationId Query on a different (content providing) station *(Optional)* (optional)
     * @return ModelTypeResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully got ModelType by id </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ModelTypeResult getModelTypeById(Long id, Long externalStationId) throws ApiException {
        ApiResponse<ModelTypeResult> localVarResp = getModelTypeByIdWithHttpInfo(id, externalStationId);
        return localVarResp.getData();
    }

    /**
     * Get modelType by id
     * Get modelType by id
     * @param id ID of ModelType **(Required)** (required)
     * @param externalStationId Query on a different (content providing) station *(Optional)* (optional)
     * @return ApiResponse&lt;ModelTypeResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully got ModelType by id </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelTypeResult> getModelTypeByIdWithHttpInfo(Long id, Long externalStationId) throws ApiException {
        okhttp3.Call localVarCall = getModelTypeByIdValidateBeforeCall(id, externalStationId, null);
        Type localVarReturnType = new TypeToken<ModelTypeResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get modelType by id (asynchronously)
     * Get modelType by id
     * @param id ID of ModelType **(Required)** (required)
     * @param externalStationId Query on a different (content providing) station *(Optional)* (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully got ModelType by id </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getModelTypeByIdAsync(Long id, Long externalStationId, final ApiCallback<ModelTypeResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getModelTypeByIdValidateBeforeCall(id, externalStationId, _callback);
        Type localVarReturnType = new TypeToken<ModelTypeResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listModelTypes
     * @param page Current page *(Optional)* (optional)
     * @param programId Search on Program ID *(Optional)* (optional)
     * @param broadcastId Search on Broadcast ID *(Optional)* (optional)
     * @param itemId Search on Item ID *(Optional)* (optional)
     * @param campaignId Search on Campaign ID *(Optional)* (optional)
     * @param presenterId Search on Presenter ID *(Optional)* (optional)
     * @param contactId Search on Contact ID *(Optional)* (optional)
     * @param model Search Modeltypes for certain Model *(Optional)* (optional)
     * @param limit Results per page *(Optional)* (optional)
     * @param orderBy Field to order the results *(Optional)* (optional)
     * @param orderDirection Direction of ordering *(Optional)* (optional)
     * @param externalStationId Query on a different (content providing) station *(Optional)* (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully got all modelTypes </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listModelTypesCall(Long page, Long programId, Long broadcastId, Long itemId, Long campaignId, Long presenterId, Long contactId, String model, Long limit, String orderBy, String orderDirection, Long externalStationId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/model_types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (programId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("program_id", programId));
        }

        if (broadcastId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("broadcast_id", broadcastId));
        }

        if (itemId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("item_id", itemId));
        }

        if (campaignId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("campaign_id", campaignId));
        }

        if (presenterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("presenter_id", presenterId));
        }

        if (contactId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_id", contactId));
        }

        if (model != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model", model));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order-by", orderBy));
        }

        if (orderDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order-direction", orderDirection));
        }

        if (externalStationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_external_station_id", externalStationId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "API-Key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listModelTypesValidateBeforeCall(Long page, Long programId, Long broadcastId, Long itemId, Long campaignId, Long presenterId, Long contactId, String model, Long limit, String orderBy, String orderDirection, Long externalStationId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listModelTypesCall(page, programId, broadcastId, itemId, campaignId, presenterId, contactId, model, limit, orderBy, orderDirection, externalStationId, _callback);
        return localVarCall;

    }

    /**
     * Get all modelTypes.
     * List all modelTypes.
     * @param page Current page *(Optional)* (optional)
     * @param programId Search on Program ID *(Optional)* (optional)
     * @param broadcastId Search on Broadcast ID *(Optional)* (optional)
     * @param itemId Search on Item ID *(Optional)* (optional)
     * @param campaignId Search on Campaign ID *(Optional)* (optional)
     * @param presenterId Search on Presenter ID *(Optional)* (optional)
     * @param contactId Search on Contact ID *(Optional)* (optional)
     * @param model Search Modeltypes for certain Model *(Optional)* (optional)
     * @param limit Results per page *(Optional)* (optional)
     * @param orderBy Field to order the results *(Optional)* (optional)
     * @param orderDirection Direction of ordering *(Optional)* (optional)
     * @param externalStationId Query on a different (content providing) station *(Optional)* (optional)
     * @return ModelTypeResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully got all modelTypes </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ModelTypeResults listModelTypes(Long page, Long programId, Long broadcastId, Long itemId, Long campaignId, Long presenterId, Long contactId, String model, Long limit, String orderBy, String orderDirection, Long externalStationId) throws ApiException {
        ApiResponse<ModelTypeResults> localVarResp = listModelTypesWithHttpInfo(page, programId, broadcastId, itemId, campaignId, presenterId, contactId, model, limit, orderBy, orderDirection, externalStationId);
        return localVarResp.getData();
    }

    /**
     * Get all modelTypes.
     * List all modelTypes.
     * @param page Current page *(Optional)* (optional)
     * @param programId Search on Program ID *(Optional)* (optional)
     * @param broadcastId Search on Broadcast ID *(Optional)* (optional)
     * @param itemId Search on Item ID *(Optional)* (optional)
     * @param campaignId Search on Campaign ID *(Optional)* (optional)
     * @param presenterId Search on Presenter ID *(Optional)* (optional)
     * @param contactId Search on Contact ID *(Optional)* (optional)
     * @param model Search Modeltypes for certain Model *(Optional)* (optional)
     * @param limit Results per page *(Optional)* (optional)
     * @param orderBy Field to order the results *(Optional)* (optional)
     * @param orderDirection Direction of ordering *(Optional)* (optional)
     * @param externalStationId Query on a different (content providing) station *(Optional)* (optional)
     * @return ApiResponse&lt;ModelTypeResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully got all modelTypes </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelTypeResults> listModelTypesWithHttpInfo(Long page, Long programId, Long broadcastId, Long itemId, Long campaignId, Long presenterId, Long contactId, String model, Long limit, String orderBy, String orderDirection, Long externalStationId) throws ApiException {
        okhttp3.Call localVarCall = listModelTypesValidateBeforeCall(page, programId, broadcastId, itemId, campaignId, presenterId, contactId, model, limit, orderBy, orderDirection, externalStationId, null);
        Type localVarReturnType = new TypeToken<ModelTypeResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all modelTypes. (asynchronously)
     * List all modelTypes.
     * @param page Current page *(Optional)* (optional)
     * @param programId Search on Program ID *(Optional)* (optional)
     * @param broadcastId Search on Broadcast ID *(Optional)* (optional)
     * @param itemId Search on Item ID *(Optional)* (optional)
     * @param campaignId Search on Campaign ID *(Optional)* (optional)
     * @param presenterId Search on Presenter ID *(Optional)* (optional)
     * @param contactId Search on Contact ID *(Optional)* (optional)
     * @param model Search Modeltypes for certain Model *(Optional)* (optional)
     * @param limit Results per page *(Optional)* (optional)
     * @param orderBy Field to order the results *(Optional)* (optional)
     * @param orderDirection Direction of ordering *(Optional)* (optional)
     * @param externalStationId Query on a different (content providing) station *(Optional)* (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully got all modelTypes </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listModelTypesAsync(Long page, Long programId, Long broadcastId, Long itemId, Long campaignId, Long presenterId, Long contactId, String model, Long limit, String orderBy, String orderDirection, Long externalStationId, final ApiCallback<ModelTypeResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = listModelTypesValidateBeforeCall(page, programId, broadcastId, itemId, campaignId, presenterId, contactId, model, limit, orderBy, orderDirection, externalStationId, _callback);
        Type localVarReturnType = new TypeToken<ModelTypeResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
