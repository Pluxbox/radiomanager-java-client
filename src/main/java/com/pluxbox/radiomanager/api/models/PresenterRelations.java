/*
 * RadioManager
 * This OpenAPI 3 Document describes the functionality of the API v2 of RadioManager. Note that no rights can be derived from this Document and the true functionality of the API might differ.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@pluxbox.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pluxbox.radiomanager.api.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pluxbox.radiomanager.api.models.PresenterRelationsBroadcasts;
import com.pluxbox.radiomanager.api.models.PresenterRelationsModelType;
import com.pluxbox.radiomanager.api.models.PresenterRelationsPrograms;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.pluxbox.radiomanager.api.invoker.JSON;

/**
 * PresenterRelations
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PresenterRelations {
  public static final String SERIALIZED_NAME_PROGRAMS = "programs";
  @SerializedName(SERIALIZED_NAME_PROGRAMS)
  private PresenterRelationsPrograms programs;

  public static final String SERIALIZED_NAME_BROADCASTS = "broadcasts";
  @SerializedName(SERIALIZED_NAME_BROADCASTS)
  private PresenterRelationsBroadcasts broadcasts;

  public static final String SERIALIZED_NAME_MODEL_TYPE = "model_type";
  @SerializedName(SERIALIZED_NAME_MODEL_TYPE)
  private PresenterRelationsModelType modelType;

  public PresenterRelations() {
  }

  public PresenterRelations programs(PresenterRelationsPrograms programs) {
    
    this.programs = programs;
    return this;
  }

   /**
   * Get programs
   * @return programs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PresenterRelationsPrograms getPrograms() {
    return programs;
  }


  public void setPrograms(PresenterRelationsPrograms programs) {
    this.programs = programs;
  }


  public PresenterRelations broadcasts(PresenterRelationsBroadcasts broadcasts) {
    
    this.broadcasts = broadcasts;
    return this;
  }

   /**
   * Get broadcasts
   * @return broadcasts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PresenterRelationsBroadcasts getBroadcasts() {
    return broadcasts;
  }


  public void setBroadcasts(PresenterRelationsBroadcasts broadcasts) {
    this.broadcasts = broadcasts;
  }


  public PresenterRelations modelType(PresenterRelationsModelType modelType) {
    
    this.modelType = modelType;
    return this;
  }

   /**
   * Get modelType
   * @return modelType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PresenterRelationsModelType getModelType() {
    return modelType;
  }


  public void setModelType(PresenterRelationsModelType modelType) {
    this.modelType = modelType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PresenterRelations presenterRelations = (PresenterRelations) o;
    return Objects.equals(this.programs, presenterRelations.programs) &&
        Objects.equals(this.broadcasts, presenterRelations.broadcasts) &&
        Objects.equals(this.modelType, presenterRelations.modelType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(programs, broadcasts, modelType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PresenterRelations {\n");
    sb.append("    programs: ").append(toIndentedString(programs)).append("\n");
    sb.append("    broadcasts: ").append(toIndentedString(broadcasts)).append("\n");
    sb.append("    modelType: ").append(toIndentedString(modelType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("programs");
    openapiFields.add("broadcasts");
    openapiFields.add("model_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PresenterRelations
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PresenterRelations.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PresenterRelations is not found in the empty JSON string", PresenterRelations.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PresenterRelations.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PresenterRelations` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `programs`
      if (jsonObj.get("programs") != null && !jsonObj.get("programs").isJsonNull()) {
        PresenterRelationsPrograms.validateJsonObject(jsonObj.getAsJsonObject("programs"));
      }
      // validate the optional field `broadcasts`
      if (jsonObj.get("broadcasts") != null && !jsonObj.get("broadcasts").isJsonNull()) {
        PresenterRelationsBroadcasts.validateJsonObject(jsonObj.getAsJsonObject("broadcasts"));
      }
      // validate the optional field `model_type`
      if (jsonObj.get("model_type") != null && !jsonObj.get("model_type").isJsonNull()) {
        PresenterRelationsModelType.validateJsonObject(jsonObj.getAsJsonObject("model_type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PresenterRelations.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PresenterRelations' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PresenterRelations> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PresenterRelations.class));

       return (TypeAdapter<T>) new TypeAdapter<PresenterRelations>() {
           @Override
           public void write(JsonWriter out, PresenterRelations value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PresenterRelations read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PresenterRelations given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PresenterRelations
  * @throws IOException if the JSON string is invalid with respect to PresenterRelations
  */
  public static PresenterRelations fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PresenterRelations.class);
  }

 /**
  * Convert an instance of PresenterRelations to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

