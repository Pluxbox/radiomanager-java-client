/*
 * RadioManager
 * This OpenAPI 3 Document describes the functionality of the API v2 of RadioManager. Note that no rights can be derived from this Document and the true functionality of the API might differ.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@pluxbox.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pluxbox.radiomanager.api.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pluxbox.radiomanager.api.models.ModelTypeRelationsBroadcasts;
import com.pluxbox.radiomanager.api.models.ModelTypeRelationsCampaigns;
import com.pluxbox.radiomanager.api.models.ModelTypeRelationsContacts;
import com.pluxbox.radiomanager.api.models.ModelTypeRelationsItems;
import com.pluxbox.radiomanager.api.models.ModelTypeRelationsPresenters;
import com.pluxbox.radiomanager.api.models.ModelTypeRelationsPrograms;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.pluxbox.radiomanager.api.invoker.JSON;

/**
 * ModelTypeRelations
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ModelTypeRelations {
  public static final String SERIALIZED_NAME_CAMPAIGNS = "campaigns";
  @SerializedName(SERIALIZED_NAME_CAMPAIGNS)
  private ModelTypeRelationsCampaigns campaigns;

  public static final String SERIALIZED_NAME_BROADCASTS = "broadcasts";
  @SerializedName(SERIALIZED_NAME_BROADCASTS)
  private ModelTypeRelationsBroadcasts broadcasts;

  public static final String SERIALIZED_NAME_PROGRAMS = "programs";
  @SerializedName(SERIALIZED_NAME_PROGRAMS)
  private ModelTypeRelationsPrograms programs;

  public static final String SERIALIZED_NAME_CONTACTS = "contacts";
  @SerializedName(SERIALIZED_NAME_CONTACTS)
  private ModelTypeRelationsContacts contacts;

  public static final String SERIALIZED_NAME_PRESENTERS = "presenters";
  @SerializedName(SERIALIZED_NAME_PRESENTERS)
  private ModelTypeRelationsPresenters presenters;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private ModelTypeRelationsItems items;

  public ModelTypeRelations() {
  }

  public ModelTypeRelations campaigns(ModelTypeRelationsCampaigns campaigns) {
    
    this.campaigns = campaigns;
    return this;
  }

   /**
   * Get campaigns
   * @return campaigns
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ModelTypeRelationsCampaigns getCampaigns() {
    return campaigns;
  }


  public void setCampaigns(ModelTypeRelationsCampaigns campaigns) {
    this.campaigns = campaigns;
  }


  public ModelTypeRelations broadcasts(ModelTypeRelationsBroadcasts broadcasts) {
    
    this.broadcasts = broadcasts;
    return this;
  }

   /**
   * Get broadcasts
   * @return broadcasts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ModelTypeRelationsBroadcasts getBroadcasts() {
    return broadcasts;
  }


  public void setBroadcasts(ModelTypeRelationsBroadcasts broadcasts) {
    this.broadcasts = broadcasts;
  }


  public ModelTypeRelations programs(ModelTypeRelationsPrograms programs) {
    
    this.programs = programs;
    return this;
  }

   /**
   * Get programs
   * @return programs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ModelTypeRelationsPrograms getPrograms() {
    return programs;
  }


  public void setPrograms(ModelTypeRelationsPrograms programs) {
    this.programs = programs;
  }


  public ModelTypeRelations contacts(ModelTypeRelationsContacts contacts) {
    
    this.contacts = contacts;
    return this;
  }

   /**
   * Get contacts
   * @return contacts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ModelTypeRelationsContacts getContacts() {
    return contacts;
  }


  public void setContacts(ModelTypeRelationsContacts contacts) {
    this.contacts = contacts;
  }


  public ModelTypeRelations presenters(ModelTypeRelationsPresenters presenters) {
    
    this.presenters = presenters;
    return this;
  }

   /**
   * Get presenters
   * @return presenters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ModelTypeRelationsPresenters getPresenters() {
    return presenters;
  }


  public void setPresenters(ModelTypeRelationsPresenters presenters) {
    this.presenters = presenters;
  }


  public ModelTypeRelations items(ModelTypeRelationsItems items) {
    
    this.items = items;
    return this;
  }

   /**
   * Get items
   * @return items
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ModelTypeRelationsItems getItems() {
    return items;
  }


  public void setItems(ModelTypeRelationsItems items) {
    this.items = items;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelTypeRelations modelTypeRelations = (ModelTypeRelations) o;
    return Objects.equals(this.campaigns, modelTypeRelations.campaigns) &&
        Objects.equals(this.broadcasts, modelTypeRelations.broadcasts) &&
        Objects.equals(this.programs, modelTypeRelations.programs) &&
        Objects.equals(this.contacts, modelTypeRelations.contacts) &&
        Objects.equals(this.presenters, modelTypeRelations.presenters) &&
        Objects.equals(this.items, modelTypeRelations.items);
  }

  @Override
  public int hashCode() {
    return Objects.hash(campaigns, broadcasts, programs, contacts, presenters, items);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelTypeRelations {\n");
    sb.append("    campaigns: ").append(toIndentedString(campaigns)).append("\n");
    sb.append("    broadcasts: ").append(toIndentedString(broadcasts)).append("\n");
    sb.append("    programs: ").append(toIndentedString(programs)).append("\n");
    sb.append("    contacts: ").append(toIndentedString(contacts)).append("\n");
    sb.append("    presenters: ").append(toIndentedString(presenters)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("campaigns");
    openapiFields.add("broadcasts");
    openapiFields.add("programs");
    openapiFields.add("contacts");
    openapiFields.add("presenters");
    openapiFields.add("items");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ModelTypeRelations
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ModelTypeRelations.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelTypeRelations is not found in the empty JSON string", ModelTypeRelations.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ModelTypeRelations.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelTypeRelations` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `campaigns`
      if (jsonObj.get("campaigns") != null && !jsonObj.get("campaigns").isJsonNull()) {
        ModelTypeRelationsCampaigns.validateJsonObject(jsonObj.getAsJsonObject("campaigns"));
      }
      // validate the optional field `broadcasts`
      if (jsonObj.get("broadcasts") != null && !jsonObj.get("broadcasts").isJsonNull()) {
        ModelTypeRelationsBroadcasts.validateJsonObject(jsonObj.getAsJsonObject("broadcasts"));
      }
      // validate the optional field `programs`
      if (jsonObj.get("programs") != null && !jsonObj.get("programs").isJsonNull()) {
        ModelTypeRelationsPrograms.validateJsonObject(jsonObj.getAsJsonObject("programs"));
      }
      // validate the optional field `contacts`
      if (jsonObj.get("contacts") != null && !jsonObj.get("contacts").isJsonNull()) {
        ModelTypeRelationsContacts.validateJsonObject(jsonObj.getAsJsonObject("contacts"));
      }
      // validate the optional field `presenters`
      if (jsonObj.get("presenters") != null && !jsonObj.get("presenters").isJsonNull()) {
        ModelTypeRelationsPresenters.validateJsonObject(jsonObj.getAsJsonObject("presenters"));
      }
      // validate the optional field `items`
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        ModelTypeRelationsItems.validateJsonObject(jsonObj.getAsJsonObject("items"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelTypeRelations.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelTypeRelations' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelTypeRelations> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelTypeRelations.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelTypeRelations>() {
           @Override
           public void write(JsonWriter out, ModelTypeRelations value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelTypeRelations read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModelTypeRelations given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModelTypeRelations
  * @throws IOException if the JSON string is invalid with respect to ModelTypeRelations
  */
  public static ModelTypeRelations fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelTypeRelations.class);
  }

 /**
  * Convert an instance of ModelTypeRelations to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

