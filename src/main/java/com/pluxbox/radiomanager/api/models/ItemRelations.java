/*
 * RadioManager
 * This OpenAPI 3 Document describes the functionality of the API v2 of RadioManager. Note that no rights can be derived from this Document and the true functionality of the API might differ.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@pluxbox.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pluxbox.radiomanager.api.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pluxbox.radiomanager.api.models.BlockRelationsBroadcast;
import com.pluxbox.radiomanager.api.models.BroadcastRelationsModelType;
import com.pluxbox.radiomanager.api.models.ItemRelationsBlock;
import com.pluxbox.radiomanager.api.models.ItemRelationsCampaign;
import com.pluxbox.radiomanager.api.models.ItemRelationsContacts;
import com.pluxbox.radiomanager.api.models.ItemRelationsProgram;
import com.pluxbox.radiomanager.api.models.ItemRelationsTags;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.pluxbox.radiomanager.api.invoker.JSON;

/**
 * ItemRelations
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ItemRelations {
  public static final String SERIALIZED_NAME_BLOCK = "block";
  @SerializedName(SERIALIZED_NAME_BLOCK)
  private ItemRelationsBlock block;

  public static final String SERIALIZED_NAME_BROADCAST = "broadcast";
  @SerializedName(SERIALIZED_NAME_BROADCAST)
  private BlockRelationsBroadcast broadcast;

  public static final String SERIALIZED_NAME_PROGRAM = "program";
  @SerializedName(SERIALIZED_NAME_PROGRAM)
  private ItemRelationsProgram program;

  public static final String SERIALIZED_NAME_CONTACTS = "contacts";
  @SerializedName(SERIALIZED_NAME_CONTACTS)
  private ItemRelationsContacts contacts;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private ItemRelationsTags tags;

  public static final String SERIALIZED_NAME_CAMPAIGN = "campaign";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN)
  private ItemRelationsCampaign campaign;

  public static final String SERIALIZED_NAME_MODEL_TYPE = "model_type";
  @SerializedName(SERIALIZED_NAME_MODEL_TYPE)
  private BroadcastRelationsModelType modelType;

  public ItemRelations() {
  }

  public ItemRelations block(ItemRelationsBlock block) {
    
    this.block = block;
    return this;
  }

   /**
   * Get block
   * @return block
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ItemRelationsBlock getBlock() {
    return block;
  }


  public void setBlock(ItemRelationsBlock block) {
    this.block = block;
  }


  public ItemRelations broadcast(BlockRelationsBroadcast broadcast) {
    
    this.broadcast = broadcast;
    return this;
  }

   /**
   * Get broadcast
   * @return broadcast
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BlockRelationsBroadcast getBroadcast() {
    return broadcast;
  }


  public void setBroadcast(BlockRelationsBroadcast broadcast) {
    this.broadcast = broadcast;
  }


  public ItemRelations program(ItemRelationsProgram program) {
    
    this.program = program;
    return this;
  }

   /**
   * Get program
   * @return program
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ItemRelationsProgram getProgram() {
    return program;
  }


  public void setProgram(ItemRelationsProgram program) {
    this.program = program;
  }


  public ItemRelations contacts(ItemRelationsContacts contacts) {
    
    this.contacts = contacts;
    return this;
  }

   /**
   * Get contacts
   * @return contacts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ItemRelationsContacts getContacts() {
    return contacts;
  }


  public void setContacts(ItemRelationsContacts contacts) {
    this.contacts = contacts;
  }


  public ItemRelations tags(ItemRelationsTags tags) {
    
    this.tags = tags;
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ItemRelationsTags getTags() {
    return tags;
  }


  public void setTags(ItemRelationsTags tags) {
    this.tags = tags;
  }


  public ItemRelations campaign(ItemRelationsCampaign campaign) {
    
    this.campaign = campaign;
    return this;
  }

   /**
   * Get campaign
   * @return campaign
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ItemRelationsCampaign getCampaign() {
    return campaign;
  }


  public void setCampaign(ItemRelationsCampaign campaign) {
    this.campaign = campaign;
  }


  public ItemRelations modelType(BroadcastRelationsModelType modelType) {
    
    this.modelType = modelType;
    return this;
  }

   /**
   * Get modelType
   * @return modelType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BroadcastRelationsModelType getModelType() {
    return modelType;
  }


  public void setModelType(BroadcastRelationsModelType modelType) {
    this.modelType = modelType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemRelations itemRelations = (ItemRelations) o;
    return Objects.equals(this.block, itemRelations.block) &&
        Objects.equals(this.broadcast, itemRelations.broadcast) &&
        Objects.equals(this.program, itemRelations.program) &&
        Objects.equals(this.contacts, itemRelations.contacts) &&
        Objects.equals(this.tags, itemRelations.tags) &&
        Objects.equals(this.campaign, itemRelations.campaign) &&
        Objects.equals(this.modelType, itemRelations.modelType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(block, broadcast, program, contacts, tags, campaign, modelType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemRelations {\n");
    sb.append("    block: ").append(toIndentedString(block)).append("\n");
    sb.append("    broadcast: ").append(toIndentedString(broadcast)).append("\n");
    sb.append("    program: ").append(toIndentedString(program)).append("\n");
    sb.append("    contacts: ").append(toIndentedString(contacts)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    campaign: ").append(toIndentedString(campaign)).append("\n");
    sb.append("    modelType: ").append(toIndentedString(modelType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("block");
    openapiFields.add("broadcast");
    openapiFields.add("program");
    openapiFields.add("contacts");
    openapiFields.add("tags");
    openapiFields.add("campaign");
    openapiFields.add("model_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ItemRelations
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ItemRelations.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ItemRelations is not found in the empty JSON string", ItemRelations.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ItemRelations.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ItemRelations` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `block`
      if (jsonObj.get("block") != null && !jsonObj.get("block").isJsonNull()) {
        ItemRelationsBlock.validateJsonObject(jsonObj.getAsJsonObject("block"));
      }
      // validate the optional field `broadcast`
      if (jsonObj.get("broadcast") != null && !jsonObj.get("broadcast").isJsonNull()) {
        BlockRelationsBroadcast.validateJsonObject(jsonObj.getAsJsonObject("broadcast"));
      }
      // validate the optional field `program`
      if (jsonObj.get("program") != null && !jsonObj.get("program").isJsonNull()) {
        ItemRelationsProgram.validateJsonObject(jsonObj.getAsJsonObject("program"));
      }
      // validate the optional field `contacts`
      if (jsonObj.get("contacts") != null && !jsonObj.get("contacts").isJsonNull()) {
        ItemRelationsContacts.validateJsonObject(jsonObj.getAsJsonObject("contacts"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        ItemRelationsTags.validateJsonObject(jsonObj.getAsJsonObject("tags"));
      }
      // validate the optional field `campaign`
      if (jsonObj.get("campaign") != null && !jsonObj.get("campaign").isJsonNull()) {
        ItemRelationsCampaign.validateJsonObject(jsonObj.getAsJsonObject("campaign"));
      }
      // validate the optional field `model_type`
      if (jsonObj.get("model_type") != null && !jsonObj.get("model_type").isJsonNull()) {
        BroadcastRelationsModelType.validateJsonObject(jsonObj.getAsJsonObject("model_type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ItemRelations.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ItemRelations' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ItemRelations> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ItemRelations.class));

       return (TypeAdapter<T>) new TypeAdapter<ItemRelations>() {
           @Override
           public void write(JsonWriter out, ItemRelations value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ItemRelations read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ItemRelations given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ItemRelations
  * @throws IOException if the JSON string is invalid with respect to ItemRelations
  */
  public static ItemRelations fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ItemRelations.class);
  }

 /**
  * Convert an instance of ItemRelations to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

