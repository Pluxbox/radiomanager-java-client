/*
 * RadioManager
 * This OpenAPI 3 Document describes the functionality of the API v2 of RadioManager. Note that no rights can be derived from this Document and the true functionality of the API might differ.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@pluxbox.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pluxbox.radiomanager.api.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pluxbox.radiomanager.api.models.BroadcastEPGDay;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.pluxbox.radiomanager.api.invoker.JSON;

/**
 * EPGResults
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class EPGResults {
  public static final String SERIALIZED_NAME_DAYS = "days";
  @SerializedName(SERIALIZED_NAME_DAYS)
  private List<BroadcastEPGDay> days = new ArrayList<>();

  public static final String SERIALIZED_NAME_NEXT_PAGE_URL = "next_page_url";
  @SerializedName(SERIALIZED_NAME_NEXT_PAGE_URL)
  private String nextPageUrl;

  public static final String SERIALIZED_NAME_PREV_PAGE_URL = "prev_page_url";
  @SerializedName(SERIALIZED_NAME_PREV_PAGE_URL)
  private String prevPageUrl;

  public EPGResults() {
  }

  public EPGResults days(List<BroadcastEPGDay> days) {
    
    this.days = days;
    return this;
  }

  public EPGResults addDaysItem(BroadcastEPGDay daysItem) {
    this.days.add(daysItem);
    return this;
  }

   /**
   * Get days
   * @return days
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<BroadcastEPGDay> getDays() {
    return days;
  }


  public void setDays(List<BroadcastEPGDay> days) {
    this.days = days;
  }


  public EPGResults nextPageUrl(String nextPageUrl) {
    
    this.nextPageUrl = nextPageUrl;
    return this;
  }

   /**
   * Get nextPageUrl
   * @return nextPageUrl
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://radiomanager.io/api/v1/broadcasts/epg?date=2016-01-12&withunpublished=false", required = true, value = "")

  public String getNextPageUrl() {
    return nextPageUrl;
  }


  public void setNextPageUrl(String nextPageUrl) {
    this.nextPageUrl = nextPageUrl;
  }


  public EPGResults prevPageUrl(String prevPageUrl) {
    
    this.prevPageUrl = prevPageUrl;
    return this;
  }

   /**
   * Get prevPageUrl
   * @return prevPageUrl
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://radiomanager.io/api/v1/broadcasts/epg?date=2016-01-10&withunpublished=false", required = true, value = "")

  public String getPrevPageUrl() {
    return prevPageUrl;
  }


  public void setPrevPageUrl(String prevPageUrl) {
    this.prevPageUrl = prevPageUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EPGResults epGResults = (EPGResults) o;
    return Objects.equals(this.days, epGResults.days) &&
        Objects.equals(this.nextPageUrl, epGResults.nextPageUrl) &&
        Objects.equals(this.prevPageUrl, epGResults.prevPageUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(days, nextPageUrl, prevPageUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EPGResults {\n");
    sb.append("    days: ").append(toIndentedString(days)).append("\n");
    sb.append("    nextPageUrl: ").append(toIndentedString(nextPageUrl)).append("\n");
    sb.append("    prevPageUrl: ").append(toIndentedString(prevPageUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("days");
    openapiFields.add("next_page_url");
    openapiFields.add("prev_page_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("days");
    openapiRequiredFields.add("next_page_url");
    openapiRequiredFields.add("prev_page_url");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EPGResults
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EPGResults.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EPGResults is not found in the empty JSON string", EPGResults.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!EPGResults.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EPGResults` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EPGResults.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("days").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `days` to be an array in the JSON string but got `%s`", jsonObj.get("days").toString()));
      }

      JsonArray jsonArraydays = jsonObj.getAsJsonArray("days");
      // validate the required field `days` (array)
      for (int i = 0; i < jsonArraydays.size(); i++) {
        BroadcastEPGDay.validateJsonObject(jsonArraydays.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("next_page_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `next_page_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("next_page_url").toString()));
      }
      if (!jsonObj.get("prev_page_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prev_page_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prev_page_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EPGResults.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EPGResults' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EPGResults> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EPGResults.class));

       return (TypeAdapter<T>) new TypeAdapter<EPGResults>() {
           @Override
           public void write(JsonWriter out, EPGResults value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EPGResults read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EPGResults given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EPGResults
  * @throws IOException if the JSON string is invalid with respect to EPGResults
  */
  public static EPGResults fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EPGResults.class);
  }

 /**
  * Convert an instance of EPGResults to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

