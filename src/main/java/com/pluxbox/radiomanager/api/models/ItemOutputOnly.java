/*
 * RadioManager
 * This OpenAPI 3 Document describes the functionality of the API v2 of RadioManager. Note that no rights can be derived from this Document and the true functionality of the API might differ.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@pluxbox.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pluxbox.radiomanager.api.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.pluxbox.radiomanager.api.invoker.JSON;

/**
 * ItemOutputOnly
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ItemOutputOnly {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DELETED_AT = "deleted_at";
  @SerializedName(SERIALIZED_NAME_DELETED_AT)
  private OffsetDateTime deletedAt;

  public static final String SERIALIZED_NAME_DATA_MODIFIED = "data_modified";
  @SerializedName(SERIALIZED_NAME_DATA_MODIFIED)
  private Long dataModified;

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private Long order;

  public static final String SERIALIZED_NAME_TEMPLATEBLOCK_ID = "templateblock_id";
  @SerializedName(SERIALIZED_NAME_TEMPLATEBLOCK_ID)
  private Long templateblockId;

  public static final String SERIALIZED_NAME_TEMPLATEITEM_ID = "templateitem_id";
  @SerializedName(SERIALIZED_NAME_TEMPLATEITEM_ID)
  private Long templateitemId;

  public static final String SERIALIZED_NAME_EXTERNAL_STATION_ID = "_external_station_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_STATION_ID)
  private Long externalStationId;

  public ItemOutputOnly() {
  }

  public ItemOutputOnly id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "")

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public ItemOutputOnly updatedAt(OffsetDateTime updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2017-06-23T12:00+02:00", value = "")

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public ItemOutputOnly createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2017-06-23T12:00+02:00", value = "")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public ItemOutputOnly deletedAt(OffsetDateTime deletedAt) {
    
    this.deletedAt = deletedAt;
    return this;
  }

   /**
   * Get deletedAt
   * @return deletedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2017-06-23T12:00+02:00", value = "")

  public OffsetDateTime getDeletedAt() {
    return deletedAt;
  }


  public void setDeletedAt(OffsetDateTime deletedAt) {
    this.deletedAt = deletedAt;
  }


  public ItemOutputOnly dataModified(Long dataModified) {
    
    this.dataModified = dataModified;
    return this;
  }

   /**
   * Get dataModified
   * @return dataModified
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "")

  public Long getDataModified() {
    return dataModified;
  }


  public void setDataModified(Long dataModified) {
    this.dataModified = dataModified;
  }


  public ItemOutputOnly order(Long order) {
    
    this.order = order;
    return this;
  }

   /**
   * Get order
   * @return order
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "")

  public Long getOrder() {
    return order;
  }


  public void setOrder(Long order) {
    this.order = order;
  }


  public ItemOutputOnly templateblockId(Long templateblockId) {
    
    this.templateblockId = templateblockId;
    return this;
  }

   /**
   * Get templateblockId
   * @return templateblockId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "")

  public Long getTemplateblockId() {
    return templateblockId;
  }


  public void setTemplateblockId(Long templateblockId) {
    this.templateblockId = templateblockId;
  }


  public ItemOutputOnly templateitemId(Long templateitemId) {
    
    this.templateitemId = templateitemId;
    return this;
  }

   /**
   * Get templateitemId
   * @return templateitemId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "")

  public Long getTemplateitemId() {
    return templateitemId;
  }


  public void setTemplateitemId(Long templateitemId) {
    this.templateitemId = templateitemId;
  }


  public ItemOutputOnly externalStationId(Long externalStationId) {
    
    this.externalStationId = externalStationId;
    return this;
  }

   /**
   * Get externalStationId
   * @return externalStationId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getExternalStationId() {
    return externalStationId;
  }


  public void setExternalStationId(Long externalStationId) {
    this.externalStationId = externalStationId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemOutputOnly itemOutputOnly = (ItemOutputOnly) o;
    return Objects.equals(this.id, itemOutputOnly.id) &&
        Objects.equals(this.updatedAt, itemOutputOnly.updatedAt) &&
        Objects.equals(this.createdAt, itemOutputOnly.createdAt) &&
        Objects.equals(this.deletedAt, itemOutputOnly.deletedAt) &&
        Objects.equals(this.dataModified, itemOutputOnly.dataModified) &&
        Objects.equals(this.order, itemOutputOnly.order) &&
        Objects.equals(this.templateblockId, itemOutputOnly.templateblockId) &&
        Objects.equals(this.templateitemId, itemOutputOnly.templateitemId) &&
        Objects.equals(this.externalStationId, itemOutputOnly.externalStationId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, updatedAt, createdAt, deletedAt, dataModified, order, templateblockId, templateitemId, externalStationId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemOutputOnly {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    deletedAt: ").append(toIndentedString(deletedAt)).append("\n");
    sb.append("    dataModified: ").append(toIndentedString(dataModified)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    templateblockId: ").append(toIndentedString(templateblockId)).append("\n");
    sb.append("    templateitemId: ").append(toIndentedString(templateitemId)).append("\n");
    sb.append("    externalStationId: ").append(toIndentedString(externalStationId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("updated_at");
    openapiFields.add("created_at");
    openapiFields.add("deleted_at");
    openapiFields.add("data_modified");
    openapiFields.add("order");
    openapiFields.add("templateblock_id");
    openapiFields.add("templateitem_id");
    openapiFields.add("_external_station_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ItemOutputOnly
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ItemOutputOnly.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ItemOutputOnly is not found in the empty JSON string", ItemOutputOnly.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ItemOutputOnly.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ItemOutputOnly` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ItemOutputOnly.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ItemOutputOnly' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ItemOutputOnly> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ItemOutputOnly.class));

       return (TypeAdapter<T>) new TypeAdapter<ItemOutputOnly>() {
           @Override
           public void write(JsonWriter out, ItemOutputOnly value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ItemOutputOnly read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ItemOutputOnly given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ItemOutputOnly
  * @throws IOException if the JSON string is invalid with respect to ItemOutputOnly
  */
  public static ItemOutputOnly fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ItemOutputOnly.class);
  }

 /**
  * Convert an instance of ItemOutputOnly to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

