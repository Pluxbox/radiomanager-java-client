/*
 * RadioManager
 * RadioManager
 *
 * OpenAPI spec version: 2.0
 * Contact: support@pluxbox.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.pluxbox.radiomanager.api.v2;

import com.pluxbox.radiomanager.api.invoker.ApiCallback;
import com.pluxbox.radiomanager.api.invoker.ApiClient;
import com.pluxbox.radiomanager.api.invoker.ApiException;
import com.pluxbox.radiomanager.api.invoker.ApiResponse;
import com.pluxbox.radiomanager.api.invoker.Configuration;
import com.pluxbox.radiomanager.api.invoker.Pair;
import com.pluxbox.radiomanager.api.invoker.ProgressRequestBody;
import com.pluxbox.radiomanager.api.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.pluxbox.radiomanager.api.models.BroadcastDataInput;
import com.pluxbox.radiomanager.api.models.BroadcastResult;
import com.pluxbox.radiomanager.api.models.BroadcastResults;
import com.pluxbox.radiomanager.api.models.EPGResults;
import com.pluxbox.radiomanager.api.models.Forbidden;
import com.pluxbox.radiomanager.api.models.NotFound;
import java.time.OffsetDateTime;
import com.pluxbox.radiomanager.api.models.PostSuccess;
import com.pluxbox.radiomanager.api.models.Success;
import com.pluxbox.radiomanager.api.models.TooManyRequests;
import com.pluxbox.radiomanager.api.models.UnprocessableEntity;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BroadcastApi {
    private ApiClient apiClient;

    public BroadcastApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BroadcastApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createBroadcast
     * @param data Data **(Required)** (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createBroadcastCall(BroadcastDataInput data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/broadcasts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "API Key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createBroadcastValidateBeforeCall(BroadcastDataInput data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling createBroadcast(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createBroadcastCall(data, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create broadcast.
     * Create broadcast.
     * @param data Data **(Required)** (required)
     * @return PostSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PostSuccess createBroadcast(BroadcastDataInput data) throws ApiException {
        ApiResponse<PostSuccess> resp = createBroadcastWithHttpInfo(data);
        return resp.getData();
    }

    /**
     * Create broadcast.
     * Create broadcast.
     * @param data Data **(Required)** (required)
     * @return ApiResponse&lt;PostSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PostSuccess> createBroadcastWithHttpInfo(BroadcastDataInput data) throws ApiException {
        com.squareup.okhttp.Call call = createBroadcastValidateBeforeCall(data, null, null);
        Type localVarReturnType = new TypeToken<PostSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create broadcast. (asynchronously)
     * Create broadcast.
     * @param data Data **(Required)** (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createBroadcastAsync(BroadcastDataInput data, final ApiCallback<PostSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createBroadcastValidateBeforeCall(data, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PostSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteBroadcastById
     * @param id ID of Broadcast **(Required)** (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBroadcastByIdCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/broadcasts/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "API Key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBroadcastByIdValidateBeforeCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteBroadcastById(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteBroadcastByIdCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete broadcast by id
     * Delete broadcast by id
     * @param id ID of Broadcast **(Required)** (required)
     * @return Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Success deleteBroadcastById(Long id) throws ApiException {
        ApiResponse<Success> resp = deleteBroadcastByIdWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Delete broadcast by id
     * Delete broadcast by id
     * @param id ID of Broadcast **(Required)** (required)
     * @return ApiResponse&lt;Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Success> deleteBroadcastByIdWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = deleteBroadcastByIdValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete broadcast by id (asynchronously)
     * Delete broadcast by id
     * @param id ID of Broadcast **(Required)** (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBroadcastByIdAsync(Long id, final ApiCallback<Success> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBroadcastByIdValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBroadcastById
     * @param id ID of Broadcast **(Required)** (required)
     * @param externalStationId Query on a different (content providing) station *(Optional)* (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBroadcastByIdCall(Long id, Long externalStationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/broadcasts/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (externalStationId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_external_station_id", externalStationId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "API Key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBroadcastByIdValidateBeforeCall(Long id, Long externalStationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getBroadcastById(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getBroadcastByIdCall(id, externalStationId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get broadcast by id
     * Get broadcast by id
     * @param id ID of Broadcast **(Required)** (required)
     * @param externalStationId Query on a different (content providing) station *(Optional)* (optional)
     * @return BroadcastResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BroadcastResult getBroadcastById(Long id, Long externalStationId) throws ApiException {
        ApiResponse<BroadcastResult> resp = getBroadcastByIdWithHttpInfo(id, externalStationId);
        return resp.getData();
    }

    /**
     * Get broadcast by id
     * Get broadcast by id
     * @param id ID of Broadcast **(Required)** (required)
     * @param externalStationId Query on a different (content providing) station *(Optional)* (optional)
     * @return ApiResponse&lt;BroadcastResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BroadcastResult> getBroadcastByIdWithHttpInfo(Long id, Long externalStationId) throws ApiException {
        com.squareup.okhttp.Call call = getBroadcastByIdValidateBeforeCall(id, externalStationId, null, null);
        Type localVarReturnType = new TypeToken<BroadcastResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get broadcast by id (asynchronously)
     * Get broadcast by id
     * @param id ID of Broadcast **(Required)** (required)
     * @param externalStationId Query on a different (content providing) station *(Optional)* (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBroadcastByIdAsync(Long id, Long externalStationId, final ApiCallback<BroadcastResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBroadcastByIdValidateBeforeCall(id, externalStationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BroadcastResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCurrentBroadcast
     * @param withunpublished Show Unpublished *(Optional)* (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCurrentBroadcastCall(Boolean withunpublished, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/broadcasts/current";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (withunpublished != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "withunpublished", withunpublished));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "API Key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCurrentBroadcastValidateBeforeCall(Boolean withunpublished, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getCurrentBroadcastCall(withunpublished, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get current Broadcast
     * Get current Broadcast
     * @param withunpublished Show Unpublished *(Optional)* (optional)
     * @return BroadcastResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BroadcastResult getCurrentBroadcast(Boolean withunpublished) throws ApiException {
        ApiResponse<BroadcastResult> resp = getCurrentBroadcastWithHttpInfo(withunpublished);
        return resp.getData();
    }

    /**
     * Get current Broadcast
     * Get current Broadcast
     * @param withunpublished Show Unpublished *(Optional)* (optional)
     * @return ApiResponse&lt;BroadcastResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BroadcastResult> getCurrentBroadcastWithHttpInfo(Boolean withunpublished) throws ApiException {
        com.squareup.okhttp.Call call = getCurrentBroadcastValidateBeforeCall(withunpublished, null, null);
        Type localVarReturnType = new TypeToken<BroadcastResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get current Broadcast (asynchronously)
     * Get current Broadcast
     * @param withunpublished Show Unpublished *(Optional)* (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCurrentBroadcastAsync(Boolean withunpublished, final ApiCallback<BroadcastResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCurrentBroadcastValidateBeforeCall(withunpublished, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BroadcastResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDailyEPG
     * @param date Date *(Optional)* (optional)
     * @param withunpublished Show Unpublished *(Optional)* (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDailyEPGCall(OffsetDateTime date, Boolean withunpublished, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/broadcasts/epg/daily";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (date != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "date", date));
        if (withunpublished != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "withunpublished", withunpublished));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "API Key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDailyEPGValidateBeforeCall(OffsetDateTime date, Boolean withunpublished, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getDailyEPGCall(date, withunpublished, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get daily EPG
     * Get current Broadcast
     * @param date Date *(Optional)* (optional)
     * @param withunpublished Show Unpublished *(Optional)* (optional)
     * @return EPGResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EPGResults getDailyEPG(OffsetDateTime date, Boolean withunpublished) throws ApiException {
        ApiResponse<EPGResults> resp = getDailyEPGWithHttpInfo(date, withunpublished);
        return resp.getData();
    }

    /**
     * Get daily EPG
     * Get current Broadcast
     * @param date Date *(Optional)* (optional)
     * @param withunpublished Show Unpublished *(Optional)* (optional)
     * @return ApiResponse&lt;EPGResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EPGResults> getDailyEPGWithHttpInfo(OffsetDateTime date, Boolean withunpublished) throws ApiException {
        com.squareup.okhttp.Call call = getDailyEPGValidateBeforeCall(date, withunpublished, null, null);
        Type localVarReturnType = new TypeToken<EPGResults>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get daily EPG (asynchronously)
     * Get current Broadcast
     * @param date Date *(Optional)* (optional)
     * @param withunpublished Show Unpublished *(Optional)* (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDailyEPGAsync(OffsetDateTime date, Boolean withunpublished, final ApiCallback<EPGResults> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDailyEPGValidateBeforeCall(date, withunpublished, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EPGResults>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEPGByDate
     * @param date Date *(Optional)* (optional)
     * @param withunpublished Show Unpublished *(Optional)* (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEPGByDateCall(OffsetDateTime date, Boolean withunpublished, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/broadcasts/epg";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (date != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "date", date));
        if (withunpublished != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "withunpublished", withunpublished));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "API Key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEPGByDateValidateBeforeCall(OffsetDateTime date, Boolean withunpublished, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getEPGByDateCall(date, withunpublished, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get EPG by date
     * Get EPG by date
     * @param date Date *(Optional)* (optional)
     * @param withunpublished Show Unpublished *(Optional)* (optional)
     * @return EPGResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EPGResults getEPGByDate(OffsetDateTime date, Boolean withunpublished) throws ApiException {
        ApiResponse<EPGResults> resp = getEPGByDateWithHttpInfo(date, withunpublished);
        return resp.getData();
    }

    /**
     * Get EPG by date
     * Get EPG by date
     * @param date Date *(Optional)* (optional)
     * @param withunpublished Show Unpublished *(Optional)* (optional)
     * @return ApiResponse&lt;EPGResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EPGResults> getEPGByDateWithHttpInfo(OffsetDateTime date, Boolean withunpublished) throws ApiException {
        com.squareup.okhttp.Call call = getEPGByDateValidateBeforeCall(date, withunpublished, null, null);
        Type localVarReturnType = new TypeToken<EPGResults>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get EPG by date (asynchronously)
     * Get EPG by date
     * @param date Date *(Optional)* (optional)
     * @param withunpublished Show Unpublished *(Optional)* (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEPGByDateAsync(OffsetDateTime date, Boolean withunpublished, final ApiCallback<EPGResults> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEPGByDateValidateBeforeCall(date, withunpublished, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EPGResults>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNextBroadcast
     * @param withunpublished Show Unpublished *(Optional)* (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNextBroadcastCall(Boolean withunpublished, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/broadcasts/next";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (withunpublished != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "withunpublished", withunpublished));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "API Key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNextBroadcastValidateBeforeCall(Boolean withunpublished, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getNextBroadcastCall(withunpublished, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get next Broadcast
     * Get next Broadcast
     * @param withunpublished Show Unpublished *(Optional)* (optional)
     * @return BroadcastResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BroadcastResult getNextBroadcast(Boolean withunpublished) throws ApiException {
        ApiResponse<BroadcastResult> resp = getNextBroadcastWithHttpInfo(withunpublished);
        return resp.getData();
    }

    /**
     * Get next Broadcast
     * Get next Broadcast
     * @param withunpublished Show Unpublished *(Optional)* (optional)
     * @return ApiResponse&lt;BroadcastResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BroadcastResult> getNextBroadcastWithHttpInfo(Boolean withunpublished) throws ApiException {
        com.squareup.okhttp.Call call = getNextBroadcastValidateBeforeCall(withunpublished, null, null);
        Type localVarReturnType = new TypeToken<BroadcastResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get next Broadcast (asynchronously)
     * Get next Broadcast
     * @param withunpublished Show Unpublished *(Optional)* (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNextBroadcastAsync(Boolean withunpublished, final ApiCallback<BroadcastResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNextBroadcastValidateBeforeCall(withunpublished, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BroadcastResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWeeklyEPG
     * @param date Date *(Optional)* (optional)
     * @param withunpublished Show Unpublished *(Optional)* (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWeeklyEPGCall(String date, Boolean withunpublished, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/broadcasts/epg/weekly";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (date != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "date", date));
        if (withunpublished != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "withunpublished", withunpublished));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "API Key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWeeklyEPGValidateBeforeCall(String date, Boolean withunpublished, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getWeeklyEPGCall(date, withunpublished, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get weekly EPG
     * Get weekly EPG
     * @param date Date *(Optional)* (optional)
     * @param withunpublished Show Unpublished *(Optional)* (optional)
     * @return EPGResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EPGResults getWeeklyEPG(String date, Boolean withunpublished) throws ApiException {
        ApiResponse<EPGResults> resp = getWeeklyEPGWithHttpInfo(date, withunpublished);
        return resp.getData();
    }

    /**
     * Get weekly EPG
     * Get weekly EPG
     * @param date Date *(Optional)* (optional)
     * @param withunpublished Show Unpublished *(Optional)* (optional)
     * @return ApiResponse&lt;EPGResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EPGResults> getWeeklyEPGWithHttpInfo(String date, Boolean withunpublished) throws ApiException {
        com.squareup.okhttp.Call call = getWeeklyEPGValidateBeforeCall(date, withunpublished, null, null);
        Type localVarReturnType = new TypeToken<EPGResults>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get weekly EPG (asynchronously)
     * Get weekly EPG
     * @param date Date *(Optional)* (optional)
     * @param withunpublished Show Unpublished *(Optional)* (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWeeklyEPGAsync(String date, Boolean withunpublished, final ApiCallback<EPGResults> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWeeklyEPGValidateBeforeCall(date, withunpublished, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EPGResults>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listBroadcasts
     * @param page Current page *(Optional)* (optional, default to 1)
     * @param programId Search on Program ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param blockId Search on Block ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param modelTypeId Search on ModelType ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param tagId Search on Tag ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param presenterId Search on Presenter ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param genreId Search on Genre ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param itemId Search on Item ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param startMin Minimum start date *(Optional)* (optional)
     * @param startMax Maximum start date *(Optional)* (optional)
     * @param limit Results per page *(Optional)* (optional)
     * @param orderBy Field to order the results *(Optional)* (optional)
     * @param orderDirection Direction of ordering *(Optional)* (optional)
     * @param externalStationId Query on a different (content providing) station *(Optional)* (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listBroadcastsCall(Long page, Long programId, Long blockId, Long modelTypeId, Long tagId, Long presenterId, Long genreId, Long itemId, OffsetDateTime startMin, OffsetDateTime startMax, Long limit, String orderBy, String orderDirection, Long externalStationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/broadcasts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (programId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "program_id", programId));
        if (blockId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "block_id", blockId));
        if (modelTypeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "model_type_id", modelTypeId));
        if (tagId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tag_id", tagId));
        if (presenterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "presenter_id", presenterId));
        if (genreId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "genre_id", genreId));
        if (itemId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "item_id", itemId));
        if (startMin != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start-min", startMin));
        if (startMax != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start-max", startMax));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order-by", orderBy));
        if (orderDirection != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order-direction", orderDirection));
        if (externalStationId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_external_station_id", externalStationId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "API Key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listBroadcastsValidateBeforeCall(Long page, Long programId, Long blockId, Long modelTypeId, Long tagId, Long presenterId, Long genreId, Long itemId, OffsetDateTime startMin, OffsetDateTime startMax, Long limit, String orderBy, String orderDirection, Long externalStationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = listBroadcastsCall(page, programId, blockId, modelTypeId, tagId, presenterId, genreId, itemId, startMin, startMax, limit, orderBy, orderDirection, externalStationId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all broadcasts.
     * List all broadcasts.
     * @param page Current page *(Optional)* (optional, default to 1)
     * @param programId Search on Program ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param blockId Search on Block ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param modelTypeId Search on ModelType ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param tagId Search on Tag ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param presenterId Search on Presenter ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param genreId Search on Genre ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param itemId Search on Item ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param startMin Minimum start date *(Optional)* (optional)
     * @param startMax Maximum start date *(Optional)* (optional)
     * @param limit Results per page *(Optional)* (optional)
     * @param orderBy Field to order the results *(Optional)* (optional)
     * @param orderDirection Direction of ordering *(Optional)* (optional)
     * @param externalStationId Query on a different (content providing) station *(Optional)* (optional)
     * @return BroadcastResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BroadcastResults listBroadcasts(Long page, Long programId, Long blockId, Long modelTypeId, Long tagId, Long presenterId, Long genreId, Long itemId, OffsetDateTime startMin, OffsetDateTime startMax, Long limit, String orderBy, String orderDirection, Long externalStationId) throws ApiException {
        ApiResponse<BroadcastResults> resp = listBroadcastsWithHttpInfo(page, programId, blockId, modelTypeId, tagId, presenterId, genreId, itemId, startMin, startMax, limit, orderBy, orderDirection, externalStationId);
        return resp.getData();
    }

    /**
     * Get all broadcasts.
     * List all broadcasts.
     * @param page Current page *(Optional)* (optional, default to 1)
     * @param programId Search on Program ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param blockId Search on Block ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param modelTypeId Search on ModelType ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param tagId Search on Tag ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param presenterId Search on Presenter ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param genreId Search on Genre ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param itemId Search on Item ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param startMin Minimum start date *(Optional)* (optional)
     * @param startMax Maximum start date *(Optional)* (optional)
     * @param limit Results per page *(Optional)* (optional)
     * @param orderBy Field to order the results *(Optional)* (optional)
     * @param orderDirection Direction of ordering *(Optional)* (optional)
     * @param externalStationId Query on a different (content providing) station *(Optional)* (optional)
     * @return ApiResponse&lt;BroadcastResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BroadcastResults> listBroadcastsWithHttpInfo(Long page, Long programId, Long blockId, Long modelTypeId, Long tagId, Long presenterId, Long genreId, Long itemId, OffsetDateTime startMin, OffsetDateTime startMax, Long limit, String orderBy, String orderDirection, Long externalStationId) throws ApiException {
        com.squareup.okhttp.Call call = listBroadcastsValidateBeforeCall(page, programId, blockId, modelTypeId, tagId, presenterId, genreId, itemId, startMin, startMax, limit, orderBy, orderDirection, externalStationId, null, null);
        Type localVarReturnType = new TypeToken<BroadcastResults>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all broadcasts. (asynchronously)
     * List all broadcasts.
     * @param page Current page *(Optional)* (optional, default to 1)
     * @param programId Search on Program ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param blockId Search on Block ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param modelTypeId Search on ModelType ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param tagId Search on Tag ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param presenterId Search on Presenter ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param genreId Search on Genre ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param itemId Search on Item ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param startMin Minimum start date *(Optional)* (optional)
     * @param startMax Maximum start date *(Optional)* (optional)
     * @param limit Results per page *(Optional)* (optional)
     * @param orderBy Field to order the results *(Optional)* (optional)
     * @param orderDirection Direction of ordering *(Optional)* (optional)
     * @param externalStationId Query on a different (content providing) station *(Optional)* (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listBroadcastsAsync(Long page, Long programId, Long blockId, Long modelTypeId, Long tagId, Long presenterId, Long genreId, Long itemId, OffsetDateTime startMin, OffsetDateTime startMax, Long limit, String orderBy, String orderDirection, Long externalStationId, final ApiCallback<BroadcastResults> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listBroadcastsValidateBeforeCall(page, programId, blockId, modelTypeId, tagId, presenterId, genreId, itemId, startMin, startMax, limit, orderBy, orderDirection, externalStationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BroadcastResults>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for printBroadcastById
     * @param id ID of Broadcast **(Required)** (required)
     * @param programId Search on Program ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param presenterId Search on Presenter ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param tagId Search on Tag ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printBroadcastByIdCall(Long id, Long programId, Long presenterId, Long tagId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/broadcasts/print/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (programId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "program_id", programId));
        if (presenterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "presenter_id", presenterId));
        if (tagId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tag_id", tagId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "API Key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printBroadcastByIdValidateBeforeCall(Long id, Long programId, Long presenterId, Long tagId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling printBroadcastById(Async)");
        }
        
        
        com.squareup.okhttp.Call call = printBroadcastByIdCall(id, programId, presenterId, tagId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Print Broadcast by id
     * Print Broadcast by id
     * @param id ID of Broadcast **(Required)** (required)
     * @param programId Search on Program ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param presenterId Search on Presenter ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param tagId Search on Tag ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @return EPGResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EPGResults printBroadcastById(Long id, Long programId, Long presenterId, Long tagId) throws ApiException {
        ApiResponse<EPGResults> resp = printBroadcastByIdWithHttpInfo(id, programId, presenterId, tagId);
        return resp.getData();
    }

    /**
     * Print Broadcast by id
     * Print Broadcast by id
     * @param id ID of Broadcast **(Required)** (required)
     * @param programId Search on Program ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param presenterId Search on Presenter ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param tagId Search on Tag ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @return ApiResponse&lt;EPGResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EPGResults> printBroadcastByIdWithHttpInfo(Long id, Long programId, Long presenterId, Long tagId) throws ApiException {
        com.squareup.okhttp.Call call = printBroadcastByIdValidateBeforeCall(id, programId, presenterId, tagId, null, null);
        Type localVarReturnType = new TypeToken<EPGResults>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Print Broadcast by id (asynchronously)
     * Print Broadcast by id
     * @param id ID of Broadcast **(Required)** (required)
     * @param programId Search on Program ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param presenterId Search on Presenter ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param tagId Search on Tag ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printBroadcastByIdAsync(Long id, Long programId, Long presenterId, Long tagId, final ApiCallback<EPGResults> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printBroadcastByIdValidateBeforeCall(id, programId, presenterId, tagId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EPGResults>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBroadcastByID
     * @param id ID of Broadcast **(Required)** (required)
     * @param data Data *(Optional)* (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBroadcastByIDCall(Long id, BroadcastDataInput data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/broadcasts/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "API Key" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBroadcastByIDValidateBeforeCall(Long id, BroadcastDataInput data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateBroadcastByID(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateBroadcastByIDCall(id, data, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update broadcast by id
     * Update broadcast by id
     * @param id ID of Broadcast **(Required)** (required)
     * @param data Data *(Optional)* (optional)
     * @return Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Success updateBroadcastByID(Long id, BroadcastDataInput data) throws ApiException {
        ApiResponse<Success> resp = updateBroadcastByIDWithHttpInfo(id, data);
        return resp.getData();
    }

    /**
     * Update broadcast by id
     * Update broadcast by id
     * @param id ID of Broadcast **(Required)** (required)
     * @param data Data *(Optional)* (optional)
     * @return ApiResponse&lt;Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Success> updateBroadcastByIDWithHttpInfo(Long id, BroadcastDataInput data) throws ApiException {
        com.squareup.okhttp.Call call = updateBroadcastByIDValidateBeforeCall(id, data, null, null);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update broadcast by id (asynchronously)
     * Update broadcast by id
     * @param id ID of Broadcast **(Required)** (required)
     * @param data Data *(Optional)* (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBroadcastByIDAsync(Long id, BroadcastDataInput data, final ApiCallback<Success> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBroadcastByIDValidateBeforeCall(id, data, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
