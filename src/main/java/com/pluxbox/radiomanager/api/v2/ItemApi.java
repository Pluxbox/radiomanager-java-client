/*
 * RadioManager
 * RadioManager
 *
 * OpenAPI spec version: 2.0
 * Contact: support@pluxbox.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.pluxbox.radiomanager.api.v2;

import com.pluxbox.radiomanager.api.invoker.ApiCallback;
import com.pluxbox.radiomanager.api.invoker.ApiClient;
import com.pluxbox.radiomanager.api.invoker.ApiException;
import com.pluxbox.radiomanager.api.invoker.ApiResponse;
import com.pluxbox.radiomanager.api.invoker.Configuration;
import com.pluxbox.radiomanager.api.invoker.Pair;
import com.pluxbox.radiomanager.api.invoker.ProgressRequestBody;
import com.pluxbox.radiomanager.api.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.pluxbox.radiomanager.api.models.Data;
import com.pluxbox.radiomanager.api.models.Data1;
import com.pluxbox.radiomanager.api.models.Forbidden;
import com.pluxbox.radiomanager.api.models.ImportItem;
import com.pluxbox.radiomanager.api.models.InlineResponse202;
import com.pluxbox.radiomanager.api.models.ItemDataInput;
import com.pluxbox.radiomanager.api.models.ItemResult;
import com.pluxbox.radiomanager.api.models.ItemResults;
import com.pluxbox.radiomanager.api.models.NotFound;
import java.time.OffsetDateTime;
import com.pluxbox.radiomanager.api.models.PostSuccess;
import com.pluxbox.radiomanager.api.models.Success;
import com.pluxbox.radiomanager.api.models.TooManyRequests;
import com.pluxbox.radiomanager.api.models.UnprocessableEntity;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ItemApi {
    private ApiClient apiClient;

    public ItemApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ItemApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createItem
     * @param data Data *(Optional)* (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createItemCall(ItemDataInput data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/items";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "API Key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createItemValidateBeforeCall(ItemDataInput data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = createItemCall(data, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create an new item.
     * Create item.
     * @param data Data *(Optional)* (optional)
     * @return PostSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PostSuccess createItem(ItemDataInput data) throws ApiException {
        ApiResponse<PostSuccess> resp = createItemWithHttpInfo(data);
        return resp.getData();
    }

    /**
     * Create an new item.
     * Create item.
     * @param data Data *(Optional)* (optional)
     * @return ApiResponse&lt;PostSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PostSuccess> createItemWithHttpInfo(ItemDataInput data) throws ApiException {
        com.squareup.okhttp.Call call = createItemValidateBeforeCall(data, null, null);
        Type localVarReturnType = new TypeToken<PostSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an new item. (asynchronously)
     * Create item.
     * @param data Data *(Optional)* (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createItemAsync(ItemDataInput data, final ApiCallback<PostSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createItemValidateBeforeCall(data, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PostSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for currentItemPostStructure
     * @param data Data *(Optional)* (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call currentItemPostStructureCall(ImportItem data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/items/current/structure";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "API Key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call currentItemPostStructureValidateBeforeCall(ImportItem data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = currentItemPostStructureCall(data, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Post a current playing item, keep structure
     * Post a current playing item, keep structure
     * @param data Data *(Optional)* (optional)
     * @return Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Success currentItemPostStructure(ImportItem data) throws ApiException {
        ApiResponse<Success> resp = currentItemPostStructureWithHttpInfo(data);
        return resp.getData();
    }

    /**
     * Post a current playing item, keep structure
     * Post a current playing item, keep structure
     * @param data Data *(Optional)* (optional)
     * @return ApiResponse&lt;Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Success> currentItemPostStructureWithHttpInfo(ImportItem data) throws ApiException {
        com.squareup.okhttp.Call call = currentItemPostStructureValidateBeforeCall(data, null, null);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Post a current playing item, keep structure (asynchronously)
     * Post a current playing item, keep structure
     * @param data Data *(Optional)* (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call currentItemPostStructureAsync(ImportItem data, final ApiCallback<Success> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = currentItemPostStructureValidateBeforeCall(data, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for currentItemPostTiming
     * @param data Data *(Optional)* (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call currentItemPostTimingCall(ImportItem data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/items/current/timing";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "API Key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call currentItemPostTimingValidateBeforeCall(ImportItem data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = currentItemPostTimingCall(data, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Post a current playing item
     * Post a current playing item
     * @param data Data *(Optional)* (optional)
     * @return Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Success currentItemPostTiming(ImportItem data) throws ApiException {
        ApiResponse<Success> resp = currentItemPostTimingWithHttpInfo(data);
        return resp.getData();
    }

    /**
     * Post a current playing item
     * Post a current playing item
     * @param data Data *(Optional)* (optional)
     * @return ApiResponse&lt;Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Success> currentItemPostTimingWithHttpInfo(ImportItem data) throws ApiException {
        com.squareup.okhttp.Call call = currentItemPostTimingValidateBeforeCall(data, null, null);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Post a current playing item (asynchronously)
     * Post a current playing item
     * @param data Data *(Optional)* (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call currentItemPostTimingAsync(ImportItem data, final ApiCallback<Success> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = currentItemPostTimingValidateBeforeCall(data, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteItemById
     * @param id ID of Item **(Required)** (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteItemByIdCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/items/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "API Key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteItemByIdValidateBeforeCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteItemById(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteItemByIdCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete item by ID.
     * Delete item by id.
     * @param id ID of Item **(Required)** (required)
     * @return Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Success deleteItemById(Long id) throws ApiException {
        ApiResponse<Success> resp = deleteItemByIdWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Delete item by ID.
     * Delete item by id.
     * @param id ID of Item **(Required)** (required)
     * @return ApiResponse&lt;Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Success> deleteItemByIdWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = deleteItemByIdValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete item by ID. (asynchronously)
     * Delete item by id.
     * @param id ID of Item **(Required)** (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteItemByIdAsync(Long id, final ApiCallback<Success> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteItemByIdValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getItemById
     * @param id ID of Item **(Required)** (required)
     * @param externalStationId Query on a different (content providing) station *(Optional)* (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemByIdCall(Long id, Long externalStationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/items/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (externalStationId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_external_station_id", externalStationId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "API Key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemByIdValidateBeforeCall(Long id, Long externalStationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getItemById(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getItemByIdCall(id, externalStationId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get extended item details by ID.
     * Read item by id.
     * @param id ID of Item **(Required)** (required)
     * @param externalStationId Query on a different (content providing) station *(Optional)* (optional)
     * @return ItemResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemResult getItemById(Long id, Long externalStationId) throws ApiException {
        ApiResponse<ItemResult> resp = getItemByIdWithHttpInfo(id, externalStationId);
        return resp.getData();
    }

    /**
     * Get extended item details by ID.
     * Read item by id.
     * @param id ID of Item **(Required)** (required)
     * @param externalStationId Query on a different (content providing) station *(Optional)* (optional)
     * @return ApiResponse&lt;ItemResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemResult> getItemByIdWithHttpInfo(Long id, Long externalStationId) throws ApiException {
        com.squareup.okhttp.Call call = getItemByIdValidateBeforeCall(id, externalStationId, null, null);
        Type localVarReturnType = new TypeToken<ItemResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get extended item details by ID. (asynchronously)
     * Read item by id.
     * @param id ID of Item **(Required)** (required)
     * @param externalStationId Query on a different (content providing) station *(Optional)* (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemByIdAsync(Long id, Long externalStationId, final ApiCallback<ItemResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemByIdValidateBeforeCall(id, externalStationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listItems
     * @param page Current page *(Optional)* (optional)
     * @param blockId Search on Block ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param broadcastId Search on Broadcast ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param modelTypeId Search on ModelType ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param tagId Search on Tag ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param campaignId Search on Campaign ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param contactId Search on Contact ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param programDraftId Search on Program Draft ID *(Optional)* (optional)
     * @param userDraftId Search on User Draft ID *(Optional)* (optional)
     * @param stationDraftId Search on Station Draft ID *(Optional)* (optional)
     * @param programId Search on Program ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param startMin Minimum start date *(Optional)* (optional)
     * @param startMax Maximum start date *(Optional)* (optional)
     * @param durationMin Minimum duration (seconds) *(Optional)* (optional)
     * @param durationMax Maximum duration (seconds) *(Optional)* (optional)
     * @param status Play Status of item *(Optional)* (optional)
     * @param limit Results per page *(Optional)* (optional)
     * @param orderBy Field to order the results *(Optional)* (optional)
     * @param orderDirection Direction of ordering *(Optional)* (optional)
     * @param externalStationId Query on a different (content providing) station *(Optional)* (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listItemsCall(Long page, Long blockId, Long broadcastId, Long modelTypeId, Long tagId, Long campaignId, Long contactId, Long programDraftId, Long userDraftId, Long stationDraftId, Long programId, OffsetDateTime startMin, OffsetDateTime startMax, Integer durationMin, Integer durationMax, String status, Long limit, String orderBy, String orderDirection, Long externalStationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/items";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (blockId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "block_id", blockId));
        if (broadcastId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "broadcast_id", broadcastId));
        if (modelTypeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "model_type_id", modelTypeId));
        if (tagId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tag_id", tagId));
        if (campaignId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "campaign_id", campaignId));
        if (contactId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "contact_id", contactId));
        if (programDraftId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "program_draft_id", programDraftId));
        if (userDraftId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "user_draft_id", userDraftId));
        if (stationDraftId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "station_draft_id", stationDraftId));
        if (programId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "program_id", programId));
        if (startMin != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start-min", startMin));
        if (startMax != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start-max", startMax));
        if (durationMin != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "duration-min", durationMin));
        if (durationMax != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "duration-max", durationMax));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "status", status));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order-by", orderBy));
        if (orderDirection != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order-direction", orderDirection));
        if (externalStationId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_external_station_id", externalStationId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "API Key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listItemsValidateBeforeCall(Long page, Long blockId, Long broadcastId, Long modelTypeId, Long tagId, Long campaignId, Long contactId, Long programDraftId, Long userDraftId, Long stationDraftId, Long programId, OffsetDateTime startMin, OffsetDateTime startMax, Integer durationMin, Integer durationMax, String status, Long limit, String orderBy, String orderDirection, Long externalStationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = listItemsCall(page, blockId, broadcastId, modelTypeId, tagId, campaignId, contactId, programDraftId, userDraftId, stationDraftId, programId, startMin, startMax, durationMin, durationMax, status, limit, orderBy, orderDirection, externalStationId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a list of all the items currently in your station.
     * Get a list of all the items currently in your station. This feature supports pagination and will give a maximum results of 50 items back.
     * @param page Current page *(Optional)* (optional)
     * @param blockId Search on Block ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param broadcastId Search on Broadcast ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param modelTypeId Search on ModelType ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param tagId Search on Tag ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param campaignId Search on Campaign ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param contactId Search on Contact ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param programDraftId Search on Program Draft ID *(Optional)* (optional)
     * @param userDraftId Search on User Draft ID *(Optional)* (optional)
     * @param stationDraftId Search on Station Draft ID *(Optional)* (optional)
     * @param programId Search on Program ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param startMin Minimum start date *(Optional)* (optional)
     * @param startMax Maximum start date *(Optional)* (optional)
     * @param durationMin Minimum duration (seconds) *(Optional)* (optional)
     * @param durationMax Maximum duration (seconds) *(Optional)* (optional)
     * @param status Play Status of item *(Optional)* (optional)
     * @param limit Results per page *(Optional)* (optional)
     * @param orderBy Field to order the results *(Optional)* (optional)
     * @param orderDirection Direction of ordering *(Optional)* (optional)
     * @param externalStationId Query on a different (content providing) station *(Optional)* (optional)
     * @return ItemResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemResults listItems(Long page, Long blockId, Long broadcastId, Long modelTypeId, Long tagId, Long campaignId, Long contactId, Long programDraftId, Long userDraftId, Long stationDraftId, Long programId, OffsetDateTime startMin, OffsetDateTime startMax, Integer durationMin, Integer durationMax, String status, Long limit, String orderBy, String orderDirection, Long externalStationId) throws ApiException {
        ApiResponse<ItemResults> resp = listItemsWithHttpInfo(page, blockId, broadcastId, modelTypeId, tagId, campaignId, contactId, programDraftId, userDraftId, stationDraftId, programId, startMin, startMax, durationMin, durationMax, status, limit, orderBy, orderDirection, externalStationId);
        return resp.getData();
    }

    /**
     * Get a list of all the items currently in your station.
     * Get a list of all the items currently in your station. This feature supports pagination and will give a maximum results of 50 items back.
     * @param page Current page *(Optional)* (optional)
     * @param blockId Search on Block ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param broadcastId Search on Broadcast ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param modelTypeId Search on ModelType ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param tagId Search on Tag ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param campaignId Search on Campaign ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param contactId Search on Contact ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param programDraftId Search on Program Draft ID *(Optional)* (optional)
     * @param userDraftId Search on User Draft ID *(Optional)* (optional)
     * @param stationDraftId Search on Station Draft ID *(Optional)* (optional)
     * @param programId Search on Program ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param startMin Minimum start date *(Optional)* (optional)
     * @param startMax Maximum start date *(Optional)* (optional)
     * @param durationMin Minimum duration (seconds) *(Optional)* (optional)
     * @param durationMax Maximum duration (seconds) *(Optional)* (optional)
     * @param status Play Status of item *(Optional)* (optional)
     * @param limit Results per page *(Optional)* (optional)
     * @param orderBy Field to order the results *(Optional)* (optional)
     * @param orderDirection Direction of ordering *(Optional)* (optional)
     * @param externalStationId Query on a different (content providing) station *(Optional)* (optional)
     * @return ApiResponse&lt;ItemResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemResults> listItemsWithHttpInfo(Long page, Long blockId, Long broadcastId, Long modelTypeId, Long tagId, Long campaignId, Long contactId, Long programDraftId, Long userDraftId, Long stationDraftId, Long programId, OffsetDateTime startMin, OffsetDateTime startMax, Integer durationMin, Integer durationMax, String status, Long limit, String orderBy, String orderDirection, Long externalStationId) throws ApiException {
        com.squareup.okhttp.Call call = listItemsValidateBeforeCall(page, blockId, broadcastId, modelTypeId, tagId, campaignId, contactId, programDraftId, userDraftId, stationDraftId, programId, startMin, startMax, durationMin, durationMax, status, limit, orderBy, orderDirection, externalStationId, null, null);
        Type localVarReturnType = new TypeToken<ItemResults>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a list of all the items currently in your station. (asynchronously)
     * Get a list of all the items currently in your station. This feature supports pagination and will give a maximum results of 50 items back.
     * @param page Current page *(Optional)* (optional)
     * @param blockId Search on Block ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param broadcastId Search on Broadcast ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param modelTypeId Search on ModelType ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param tagId Search on Tag ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param campaignId Search on Campaign ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param contactId Search on Contact ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param programDraftId Search on Program Draft ID *(Optional)* (optional)
     * @param userDraftId Search on User Draft ID *(Optional)* (optional)
     * @param stationDraftId Search on Station Draft ID *(Optional)* (optional)
     * @param programId Search on Program ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param startMin Minimum start date *(Optional)* (optional)
     * @param startMax Maximum start date *(Optional)* (optional)
     * @param durationMin Minimum duration (seconds) *(Optional)* (optional)
     * @param durationMax Maximum duration (seconds) *(Optional)* (optional)
     * @param status Play Status of item *(Optional)* (optional)
     * @param limit Results per page *(Optional)* (optional)
     * @param orderBy Field to order the results *(Optional)* (optional)
     * @param orderDirection Direction of ordering *(Optional)* (optional)
     * @param externalStationId Query on a different (content providing) station *(Optional)* (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listItemsAsync(Long page, Long blockId, Long broadcastId, Long modelTypeId, Long tagId, Long campaignId, Long contactId, Long programDraftId, Long userDraftId, Long stationDraftId, Long programId, OffsetDateTime startMin, OffsetDateTime startMax, Integer durationMin, Integer durationMax, String status, Long limit, String orderBy, String orderDirection, Long externalStationId, final ApiCallback<ItemResults> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listItemsValidateBeforeCall(page, blockId, broadcastId, modelTypeId, tagId, campaignId, contactId, programDraftId, userDraftId, stationDraftId, programId, startMin, startMax, durationMin, durationMax, status, limit, orderBy, orderDirection, externalStationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemResults>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for playlistPostStructure
     * @param data Data *(Optional)* (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call playlistPostStructureCall(Data1 data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/items/playlist/structure";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "API Key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call playlistPostStructureValidateBeforeCall(Data1 data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = playlistPostStructureCall(data, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Post a playlist, keep current structure
     * Post a playlist, keep current structure
     * @param data Data *(Optional)* (optional)
     * @return InlineResponse202
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse202 playlistPostStructure(Data1 data) throws ApiException {
        ApiResponse<InlineResponse202> resp = playlistPostStructureWithHttpInfo(data);
        return resp.getData();
    }

    /**
     * Post a playlist, keep current structure
     * Post a playlist, keep current structure
     * @param data Data *(Optional)* (optional)
     * @return ApiResponse&lt;InlineResponse202&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse202> playlistPostStructureWithHttpInfo(Data1 data) throws ApiException {
        com.squareup.okhttp.Call call = playlistPostStructureValidateBeforeCall(data, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse202>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Post a playlist, keep current structure (asynchronously)
     * Post a playlist, keep current structure
     * @param data Data *(Optional)* (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call playlistPostStructureAsync(Data1 data, final ApiCallback<InlineResponse202> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = playlistPostStructureValidateBeforeCall(data, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse202>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for playlistPostTiming
     * @param data Data *(Optional)* (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call playlistPostTimingCall(Data data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/items/playlist/timing";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "API Key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call playlistPostTimingValidateBeforeCall(Data data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = playlistPostTimingCall(data, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Post a playlist
     * Post a playlist
     * @param data Data *(Optional)* (optional)
     * @return InlineResponse202
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse202 playlistPostTiming(Data data) throws ApiException {
        ApiResponse<InlineResponse202> resp = playlistPostTimingWithHttpInfo(data);
        return resp.getData();
    }

    /**
     * Post a playlist
     * Post a playlist
     * @param data Data *(Optional)* (optional)
     * @return ApiResponse&lt;InlineResponse202&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse202> playlistPostTimingWithHttpInfo(Data data) throws ApiException {
        com.squareup.okhttp.Call call = playlistPostTimingValidateBeforeCall(data, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse202>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Post a playlist (asynchronously)
     * Post a playlist
     * @param data Data *(Optional)* (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call playlistPostTimingAsync(Data data, final ApiCallback<InlineResponse202> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = playlistPostTimingValidateBeforeCall(data, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse202>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateItemById
     * @param id ID of Item **(Required)** (required)
     * @param data Data *(Optional)* (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateItemByIdCall(Long id, ItemDataInput data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/items/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "API Key" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateItemByIdValidateBeforeCall(Long id, ItemDataInput data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateItemById(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateItemByIdCall(id, data, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update extended item details by ID.
     * Update item by id.
     * @param id ID of Item **(Required)** (required)
     * @param data Data *(Optional)* (optional)
     * @return Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Success updateItemById(Long id, ItemDataInput data) throws ApiException {
        ApiResponse<Success> resp = updateItemByIdWithHttpInfo(id, data);
        return resp.getData();
    }

    /**
     * Update extended item details by ID.
     * Update item by id.
     * @param id ID of Item **(Required)** (required)
     * @param data Data *(Optional)* (optional)
     * @return ApiResponse&lt;Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Success> updateItemByIdWithHttpInfo(Long id, ItemDataInput data) throws ApiException {
        com.squareup.okhttp.Call call = updateItemByIdValidateBeforeCall(id, data, null, null);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update extended item details by ID. (asynchronously)
     * Update item by id.
     * @param id ID of Item **(Required)** (required)
     * @param data Data *(Optional)* (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateItemByIdAsync(Long id, ItemDataInput data, final ApiCallback<Success> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateItemByIdValidateBeforeCall(id, data, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
