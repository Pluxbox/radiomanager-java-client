--- sdk/sdk-java/src/main/java/com/pluxbox/radiomanager/api/v2/VisualSlideApi.java
+++ sdk/sdk-java/src/main/java/com/pluxbox/radiomanager/api/v2/VisualSlideApi.java
@@ -13,25 +13,11 @@
 
 package com.pluxbox.radiomanager.api.v2;
 
-import com.pluxbox.radiomanager.api.invoker.ApiCallback;
-import com.pluxbox.radiomanager.api.invoker.ApiClient;
-import com.pluxbox.radiomanager.api.invoker.ApiException;
-import com.pluxbox.radiomanager.api.invoker.ApiResponse;
-import com.pluxbox.radiomanager.api.invoker.Configuration;
-import com.pluxbox.radiomanager.api.invoker.Pair;
-import com.pluxbox.radiomanager.api.invoker.ProgressRequestBody;
-import com.pluxbox.radiomanager.api.invoker.ProgressResponseBody;
-
 import com.google.gson.reflect.TypeToken;
-
-import java.io.IOException;
-
-
-import com.pluxbox.radiomanager.api.models.NotFound;
-import com.pluxbox.radiomanager.api.models.TooManyRequests;
-import com.pluxbox.radiomanager.api.models.VisualImageResult;
+import com.pluxbox.radiomanager.api.invoker.*;
 import com.pluxbox.radiomanager.api.models.VisualResult;
 
+import java.io.IOException;
 import java.lang.reflect.Type;
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -66,7 +52,7 @@
      */
     public com.squareup.okhttp.Call downloadVisualSlideCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
         Object localVarPostBody = null;
-        
+
         // create path and map variables
         String localVarPath = "/visual/image";
 
@@ -91,7 +77,7 @@
         if(progressListener != null) {
             apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                 @Override
-                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
+                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                     com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                     return originalResponse.newBuilder()
                     .body(new ProgressResponseBody(originalResponse.body(), progressListener))
@@ -103,76 +89,20 @@
         String[] localVarAuthNames = new String[] { "API Key" };
         return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
     }
-    
+
     @SuppressWarnings("rawtypes")
     private com.squareup.okhttp.Call downloadVisualSlideValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
-        
-        
-        com.squareup.okhttp.Call call = downloadVisualSlideCall(progressListener, progressRequestListener);
-        return call;
-
-        
-        
-        
-        
-    }
 
-    /**
-     * Get Visual Slide Image as JPEG
-     * Get Visual Slide Image as JPEG
-     * @return VisualImageResult
-     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
-     */
-    public VisualImageResult downloadVisualSlide() throws ApiException {
-        ApiResponse<VisualImageResult> resp = downloadVisualSlideWithHttpInfo();
-        return resp.getData();
-    }
 
-    /**
-     * Get Visual Slide Image as JPEG
-     * Get Visual Slide Image as JPEG
-     * @return ApiResponse&lt;VisualImageResult&gt;
-     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
-     */
-    public ApiResponse<VisualImageResult> downloadVisualSlideWithHttpInfo() throws ApiException {
-        com.squareup.okhttp.Call call = downloadVisualSlideValidateBeforeCall(null, null);
-        Type localVarReturnType = new TypeToken<VisualImageResult>(){}.getType();
-        return apiClient.execute(call, localVarReturnType);
-    }
+        com.squareup.okhttp.Call call = downloadVisualSlideCall(progressListener, progressRequestListener);
+        return call;
 
-    /**
-     * Get Visual Slide Image as JPEG (asynchronously)
-     * Get Visual Slide Image as JPEG
-     * @param callback The callback to be executed when the API call finishes
-     * @return The request call
-     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
-     */
-    public com.squareup.okhttp.Call downloadVisualSlideAsync(final ApiCallback<VisualImageResult> callback) throws ApiException {
 
-        ProgressResponseBody.ProgressListener progressListener = null;
-        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;
 
-        if (callback != null) {
-            progressListener = new ProgressResponseBody.ProgressListener() {
-                @Override
-                public void update(long bytesRead, long contentLength, boolean done) {
-                    callback.onDownloadProgress(bytesRead, contentLength, done);
-                }
-            };
 
-            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
-                @Override
-                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
-                    callback.onUploadProgress(bytesWritten, contentLength, done);
-                }
-            };
-        }
 
-        com.squareup.okhttp.Call call = downloadVisualSlideValidateBeforeCall(progressListener, progressRequestListener);
-        Type localVarReturnType = new TypeToken<VisualImageResult>(){}.getType();
-        apiClient.executeAsync(call, localVarReturnType, callback);
-        return call;
     }
+
     /**
      * Build call for getVisualSlide
      * @param progressListener Progress listener
@@ -182,7 +112,7 @@
      */
     public com.squareup.okhttp.Call getVisualSlideCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
         Object localVarPostBody = null;
-        
+
         // create path and map variables
         String localVarPath = "/visual";
 
@@ -207,7 +137,7 @@
         if(progressListener != null) {
             apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                 @Override
-                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
+                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                     com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                     return originalResponse.newBuilder()
                     .body(new ProgressResponseBody(originalResponse.body(), progressListener))
