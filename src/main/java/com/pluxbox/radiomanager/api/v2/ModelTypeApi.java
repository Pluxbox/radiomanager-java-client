/*
 * RadioManager
 * RadioManager
 *
 * OpenAPI spec version: 2.0
 * Contact: support@pluxbox.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.pluxbox.radiomanager.api.v2;

import com.pluxbox.radiomanager.api.invoker.ApiCallback;
import com.pluxbox.radiomanager.api.invoker.ApiClient;
import com.pluxbox.radiomanager.api.invoker.ApiException;
import com.pluxbox.radiomanager.api.invoker.ApiResponse;
import com.pluxbox.radiomanager.api.invoker.Configuration;
import com.pluxbox.radiomanager.api.invoker.Pair;
import com.pluxbox.radiomanager.api.invoker.ProgressRequestBody;
import com.pluxbox.radiomanager.api.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.pluxbox.radiomanager.api.models.Forbidden;
import com.pluxbox.radiomanager.api.models.ModelTypeResult;
import com.pluxbox.radiomanager.api.models.ModelTypeResults;
import com.pluxbox.radiomanager.api.models.NotFound;
import com.pluxbox.radiomanager.api.models.TooManyRequests;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ModelTypeApi {
    private ApiClient apiClient;

    public ModelTypeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ModelTypeApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getModelTypeById
     * @param id ID of ModelType **(Required)** (required)
     * @param externalStationId Query on a different (content providing) station *(Optional)* (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getModelTypeByIdCall(Long id, Long externalStationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/model_types/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (externalStationId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_external_station_id", externalStationId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "API Key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getModelTypeByIdValidateBeforeCall(Long id, Long externalStationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getModelTypeById(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getModelTypeByIdCall(id, externalStationId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get modelType by id
     * Get modelType by id
     * @param id ID of ModelType **(Required)** (required)
     * @param externalStationId Query on a different (content providing) station *(Optional)* (optional)
     * @return ModelTypeResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelTypeResult getModelTypeById(Long id, Long externalStationId) throws ApiException {
        ApiResponse<ModelTypeResult> resp = getModelTypeByIdWithHttpInfo(id, externalStationId);
        return resp.getData();
    }

    /**
     * Get modelType by id
     * Get modelType by id
     * @param id ID of ModelType **(Required)** (required)
     * @param externalStationId Query on a different (content providing) station *(Optional)* (optional)
     * @return ApiResponse&lt;ModelTypeResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelTypeResult> getModelTypeByIdWithHttpInfo(Long id, Long externalStationId) throws ApiException {
        com.squareup.okhttp.Call call = getModelTypeByIdValidateBeforeCall(id, externalStationId, null, null);
        Type localVarReturnType = new TypeToken<ModelTypeResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get modelType by id (asynchronously)
     * Get modelType by id
     * @param id ID of ModelType **(Required)** (required)
     * @param externalStationId Query on a different (content providing) station *(Optional)* (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getModelTypeByIdAsync(Long id, Long externalStationId, final ApiCallback<ModelTypeResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getModelTypeByIdValidateBeforeCall(id, externalStationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelTypeResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listModelTypes
     * @param page Current page *(Optional)* (optional)
     * @param programId Search on Program ID *(Optional)* (optional)
     * @param broadcastId Search on Broadcast ID *(Optional)* (optional)
     * @param itemId Search on Item ID *(Optional)* (optional)
     * @param campaignId Search on Campaign ID *(Optional)* (optional)
     * @param presenterId Search on Presenter ID *(Optional)* (optional)
     * @param contactId Search on Contact ID *(Optional)* (optional)
     * @param model Search Modeltypes for certain Model *(Optional)* (optional)
     * @param limit Results per page *(Optional)* (optional)
     * @param orderBy Field to order the results *(Optional)* (optional)
     * @param orderDirection Direction of ordering *(Optional)* (optional)
     * @param externalStationId Query on a different (content providing) station *(Optional)* (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listModelTypesCall(Long page, Long programId, Long broadcastId, Long itemId, Long campaignId, Long presenterId, Long contactId, String model, Long limit, String orderBy, String orderDirection, Long externalStationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/model_types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (programId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "program_id", programId));
        if (broadcastId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "broadcast_id", broadcastId));
        if (itemId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "item_id", itemId));
        if (campaignId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "campaign_id", campaignId));
        if (presenterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "presenter_id", presenterId));
        if (contactId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "contact_id", contactId));
        if (model != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "model", model));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order-by", orderBy));
        if (orderDirection != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order-direction", orderDirection));
        if (externalStationId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_external_station_id", externalStationId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "API Key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listModelTypesValidateBeforeCall(Long page, Long programId, Long broadcastId, Long itemId, Long campaignId, Long presenterId, Long contactId, String model, Long limit, String orderBy, String orderDirection, Long externalStationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = listModelTypesCall(page, programId, broadcastId, itemId, campaignId, presenterId, contactId, model, limit, orderBy, orderDirection, externalStationId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all modelTypes.
     * List all modelTypes.
     * @param page Current page *(Optional)* (optional)
     * @param programId Search on Program ID *(Optional)* (optional)
     * @param broadcastId Search on Broadcast ID *(Optional)* (optional)
     * @param itemId Search on Item ID *(Optional)* (optional)
     * @param campaignId Search on Campaign ID *(Optional)* (optional)
     * @param presenterId Search on Presenter ID *(Optional)* (optional)
     * @param contactId Search on Contact ID *(Optional)* (optional)
     * @param model Search Modeltypes for certain Model *(Optional)* (optional)
     * @param limit Results per page *(Optional)* (optional)
     * @param orderBy Field to order the results *(Optional)* (optional)
     * @param orderDirection Direction of ordering *(Optional)* (optional)
     * @param externalStationId Query on a different (content providing) station *(Optional)* (optional)
     * @return ModelTypeResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelTypeResults listModelTypes(Long page, Long programId, Long broadcastId, Long itemId, Long campaignId, Long presenterId, Long contactId, String model, Long limit, String orderBy, String orderDirection, Long externalStationId) throws ApiException {
        ApiResponse<ModelTypeResults> resp = listModelTypesWithHttpInfo(page, programId, broadcastId, itemId, campaignId, presenterId, contactId, model, limit, orderBy, orderDirection, externalStationId);
        return resp.getData();
    }

    /**
     * Get all modelTypes.
     * List all modelTypes.
     * @param page Current page *(Optional)* (optional)
     * @param programId Search on Program ID *(Optional)* (optional)
     * @param broadcastId Search on Broadcast ID *(Optional)* (optional)
     * @param itemId Search on Item ID *(Optional)* (optional)
     * @param campaignId Search on Campaign ID *(Optional)* (optional)
     * @param presenterId Search on Presenter ID *(Optional)* (optional)
     * @param contactId Search on Contact ID *(Optional)* (optional)
     * @param model Search Modeltypes for certain Model *(Optional)* (optional)
     * @param limit Results per page *(Optional)* (optional)
     * @param orderBy Field to order the results *(Optional)* (optional)
     * @param orderDirection Direction of ordering *(Optional)* (optional)
     * @param externalStationId Query on a different (content providing) station *(Optional)* (optional)
     * @return ApiResponse&lt;ModelTypeResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelTypeResults> listModelTypesWithHttpInfo(Long page, Long programId, Long broadcastId, Long itemId, Long campaignId, Long presenterId, Long contactId, String model, Long limit, String orderBy, String orderDirection, Long externalStationId) throws ApiException {
        com.squareup.okhttp.Call call = listModelTypesValidateBeforeCall(page, programId, broadcastId, itemId, campaignId, presenterId, contactId, model, limit, orderBy, orderDirection, externalStationId, null, null);
        Type localVarReturnType = new TypeToken<ModelTypeResults>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all modelTypes. (asynchronously)
     * List all modelTypes.
     * @param page Current page *(Optional)* (optional)
     * @param programId Search on Program ID *(Optional)* (optional)
     * @param broadcastId Search on Broadcast ID *(Optional)* (optional)
     * @param itemId Search on Item ID *(Optional)* (optional)
     * @param campaignId Search on Campaign ID *(Optional)* (optional)
     * @param presenterId Search on Presenter ID *(Optional)* (optional)
     * @param contactId Search on Contact ID *(Optional)* (optional)
     * @param model Search Modeltypes for certain Model *(Optional)* (optional)
     * @param limit Results per page *(Optional)* (optional)
     * @param orderBy Field to order the results *(Optional)* (optional)
     * @param orderDirection Direction of ordering *(Optional)* (optional)
     * @param externalStationId Query on a different (content providing) station *(Optional)* (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listModelTypesAsync(Long page, Long programId, Long broadcastId, Long itemId, Long campaignId, Long presenterId, Long contactId, String model, Long limit, String orderBy, String orderDirection, Long externalStationId, final ApiCallback<ModelTypeResults> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listModelTypesValidateBeforeCall(page, programId, broadcastId, itemId, campaignId, presenterId, contactId, model, limit, orderBy, orderDirection, externalStationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelTypeResults>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
